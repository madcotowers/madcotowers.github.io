define(['dart_sdk', 'packages/assets_audio_player/src/loop.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/widgets/async.dart', 'packages/assets_audio_player/src/applifecycle.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/rxdart/src/subjects/replay_subject.dart', 'packages/rxdart/src/streams/value_stream.dart', 'packages/uuid/uuid.dart', 'packages/assets_audio_player/src/utils.dart', 'packages/rxdart/src/subjects/publish_subject.dart', 'packages/rxdart/src/streams/combine_latest.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/path_provider/path_provider.dart'], (function load__packages__assets_audio_player__src__widget__audio_widget_dart(dart_sdk, packages__assets_audio_player__src__loop$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__widgets__async$46dart, packages__assets_audio_player__src__applifecycle$46dart, packages__flutter__src__services__system_channels$46dart, packages__rxdart__src__subjects__replay_subject$46dart, packages__rxdart__src__streams__value_stream$46dart, packages__uuid__uuid$46dart, packages__assets_audio_player__src__utils$46dart, packages__rxdart__src__subjects__publish_subject$46dart, packages__rxdart__src__streams__combine_latest$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__path_provider__path_provider$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const loop = packages__assets_audio_player__src__loop$46dart.src__loop;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const async$ = packages__flutter__src__widgets__async$46dart.src__widgets__async;
  const applifecycle = packages__assets_audio_player__src__applifecycle$46dart.src__applifecycle;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const behavior_subject = packages__rxdart__src__subjects__replay_subject$46dart.src__subjects__behavior_subject;
  const value_stream = packages__rxdart__src__streams__value_stream$46dart.src__streams__value_stream;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const utils = packages__assets_audio_player__src__utils$46dart.src__utils;
  const publish_subject = packages__rxdart__src__subjects__publish_subject$46dart.src__subjects__publish_subject;
  const combine_latest = packages__rxdart__src__streams__combine_latest$46dart.src__streams__combine_latest;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  var audio_widget = Object.create(dart.library);
  var player_builders_ext = Object.create(dart.library);
  var player_builders = Object.create(dart.library);
  var player_group = Object.create(dart.library);
  var playing$ = Object.create(dart.library);
  var playable$ = Object.create(dart.library);
  var notification = Object.create(dart.library);
  var assets_audio_player = Object.create(dart.library);
  var assets_audio_player$ = Object.create(dart.library);
  var $toString = dartx.toString;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $values = dartx.values;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $removeWhere = dartx.removeWhere;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $_get = dartx._get;
  var $addAll = dartx.addAll;
  var $length = dartx.length;
  var $insert = dartx.insert;
  var $elementAt = dartx.elementAt;
  var $indexOf = dartx.indexOf;
  var $removeAt = dartx.removeAt;
  var $contains = dartx.contains;
  var $containsKey = dartx.containsKey;
  var $round = dartx.round;
  var $isNaN = dartx.isNaN;
  var $clamp = dartx.clamp;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $indexWhere = dartx.indexWhere;
  var $last = dartx.last;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    PlayingAudioL: () => (T.PlayingAudioL = dart.constFn(dart.legacy(playing$.PlayingAudio)))(),
    PlayingAudioLToNull: () => (T.PlayingAudioLToNull = dart.constFn(dart.fnType(core.Null, [T.PlayingAudioL()])))(),
    PlayingL: () => (T.PlayingL = dart.constFn(dart.legacy(playing$.Playing)))(),
    PlayingLToNull: () => (T.PlayingLToNull = dart.constFn(dart.fnType(core.Null, [T.PlayingL()])))(),
    DurationL: () => (T.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    DurationLToNull: () => (T.DurationLToNull = dart.constFn(dart.fnType(core.Null, [T.DurationL()])))(),
    AudioWidgetL: () => (T.AudioWidgetL = dart.constFn(dart.legacy(audio_widget.AudioWidget)))(),
    PlayerBuilderL: () => (T.PlayerBuilderL = dart.constFn(dart.legacy(player_builders.PlayerBuilder)))(),
    WidgetL: () => (T.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    BuildContextL: () => (T.BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    BuildContextLAndboolLToWidgetL: () => (T.BuildContextLAndboolLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.boolL()])))(),
    BuildContextLAndboolLToLWidgetL: () => (T.BuildContextLAndboolLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndboolLToWidgetL())))(),
    KeyL: () => (T.KeyL = dart.constFn(dart.legacy(key.Key)))(),
    __ToPlayerBuilderL: () => (T.__ToPlayerBuilderL = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndboolLToLWidgetL(), key: T.KeyL()}, {})))(),
    LoopModeL: () => (T.LoopModeL = dart.constFn(dart.legacy(loop.LoopMode)))(),
    BuildContextLAndLoopModeLToWidgetL: () => (T.BuildContextLAndLoopModeLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.LoopModeL()])))(),
    BuildContextLAndLoopModeLToLWidgetL: () => (T.BuildContextLAndLoopModeLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndLoopModeLToWidgetL())))(),
    __ToPlayerBuilderL$1: () => (T.__ToPlayerBuilderL$1 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndLoopModeLToLWidgetL(), key: T.KeyL()}, {})))(),
    RealtimePlayingInfosL: () => (T.RealtimePlayingInfosL = dart.constFn(dart.legacy(playing$.RealtimePlayingInfos)))(),
    BuildContextLAndRealtimePlayingInfosLToWidgetL: () => (T.BuildContextLAndRealtimePlayingInfosLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.RealtimePlayingInfosL()])))(),
    BuildContextLAndRealtimePlayingInfosLToLWidgetL: () => (T.BuildContextLAndRealtimePlayingInfosLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndRealtimePlayingInfosLToWidgetL())))(),
    __ToPlayerBuilderL$2: () => (T.__ToPlayerBuilderL$2 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndRealtimePlayingInfosLToLWidgetL(), key: T.KeyL()}, {})))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    BuildContextLAnddoubleLToWidgetL: () => (T.BuildContextLAnddoubleLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.doubleL()])))(),
    BuildContextLAnddoubleLToLWidgetL: () => (T.BuildContextLAnddoubleLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAnddoubleLToWidgetL())))(),
    __ToPlayerBuilderL$3: () => (T.__ToPlayerBuilderL$3 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAnddoubleLToLWidgetL(), key: T.KeyL()}, {})))(),
    BuildContextLAndDurationLToWidgetL: () => (T.BuildContextLAndDurationLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.DurationL()])))(),
    BuildContextLAndDurationLToLWidgetL: () => (T.BuildContextLAndDurationLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndDurationLToWidgetL())))(),
    __ToPlayerBuilderL$4: () => (T.__ToPlayerBuilderL$4 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndDurationLToLWidgetL(), key: T.KeyL()}, {})))(),
    BuildContextLAndPlayingLToWidgetL: () => (T.BuildContextLAndPlayingLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.PlayingL()])))(),
    BuildContextLAndPlayingLToLWidgetL: () => (T.BuildContextLAndPlayingLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndPlayingLToWidgetL())))(),
    __ToPlayerBuilderL$5: () => (T.__ToPlayerBuilderL$5 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndPlayingLToLWidgetL(), key: T.KeyL()}, {})))(),
    PlayerStateL: () => (T.PlayerStateL = dart.constFn(dart.legacy(assets_audio_player.PlayerState)))(),
    BuildContextLAndPlayerStateLToWidgetL: () => (T.BuildContextLAndPlayerStateLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.PlayerStateL()])))(),
    BuildContextLAndPlayerStateLToLWidgetL: () => (T.BuildContextLAndPlayerStateLToLWidgetL = dart.constFn(dart.legacy(T.BuildContextLAndPlayerStateLToWidgetL())))(),
    __ToPlayerBuilderL$6: () => (T.__ToPlayerBuilderL$6 = dart.constFn(dart.fnType(T.PlayerBuilderL(), [], {builder: T.BuildContextLAndPlayerStateLToLWidgetL(), key: T.KeyL()}, {})))(),
    PlayerGroupBuilderL: () => (T.PlayerGroupBuilderL = dart.constFn(dart.legacy(player_builders.PlayerGroupBuilder)))(),
    __ToPlayerGroupBuilderL: () => (T.__ToPlayerGroupBuilderL = dart.constFn(dart.fnType(T.PlayerGroupBuilderL(), [], {builder: T.BuildContextLAndboolLToLWidgetL(), key: T.KeyL()}, {})))(),
    _PlayingBuilderTypeL: () => (T._PlayingBuilderTypeL = dart.constFn(dart.legacy(player_builders._PlayingBuilderType)))(),
    StreamBuilderOfboolL: () => (T.StreamBuilderOfboolL = dart.constFn(async$.StreamBuilder$(T.boolL())))(),
    AsyncSnapshotL: () => (T.AsyncSnapshotL = dart.constFn(dart.legacy(async$.AsyncSnapshot)))(),
    BuildContextLAndAsyncSnapshotLToWidgetL: () => (T.BuildContextLAndAsyncSnapshotLToWidgetL = dart.constFn(dart.fnType(T.WidgetL(), [T.BuildContextL(), T.AsyncSnapshotL()])))(),
    StreamBuilderOfLoopModeL: () => (T.StreamBuilderOfLoopModeL = dart.constFn(async$.StreamBuilder$(T.LoopModeL())))(),
    StreamBuilderOfdoubleL: () => (T.StreamBuilderOfdoubleL = dart.constFn(async$.StreamBuilder$(T.doubleL())))(),
    StreamBuilderOfDurationL: () => (T.StreamBuilderOfDurationL = dart.constFn(async$.StreamBuilder$(T.DurationL())))(),
    StreamBuilderOfPlayingL: () => (T.StreamBuilderOfPlayingL = dart.constFn(async$.StreamBuilder$(T.PlayingL())))(),
    StreamBuilderOfRealtimePlayingInfosL: () => (T.StreamBuilderOfRealtimePlayingInfosL = dart.constFn(async$.StreamBuilder$(T.RealtimePlayingInfosL())))(),
    StreamBuilderOfPlayerStateL: () => (T.StreamBuilderOfPlayerStateL = dart.constFn(async$.StreamBuilder$(T.PlayerStateL())))(),
    AudioL: () => (T.AudioL = dart.constFn(dart.legacy(playable$.Audio)))(),
    AssetsAudioPlayerL: () => (T.AssetsAudioPlayerL = dart.constFn(dart.legacy(assets_audio_player.AssetsAudioPlayer)))(),
    LinkedMapOfAudioL$AssetsAudioPlayerL: () => (T.LinkedMapOfAudioL$AssetsAudioPlayerL = dart.constFn(_js_helper.LinkedMap$(T.AudioL(), T.AssetsAudioPlayerL())))(),
    StreamSubscriptionL: () => (T.StreamSubscriptionL = dart.constFn(dart.legacy(async.StreamSubscription)))(),
    JSArrayOfStreamSubscriptionL: () => (T.JSArrayOfStreamSubscriptionL = dart.constFn(_interceptors.JSArray$(T.StreamSubscriptionL())))(),
    BehaviorSubjectOfboolL: () => (T.BehaviorSubjectOfboolL = dart.constFn(behavior_subject.BehaviorSubject$(T.boolL())))(),
    LinkedHashMapOfAudioL$AssetsAudioPlayerL: () => (T.LinkedHashMapOfAudioL$AssetsAudioPlayerL = dart.constFn(collection.LinkedHashMap$(T.AudioL(), T.AssetsAudioPlayerL())))(),
    JSArrayOfPlayingAudioL: () => (T.JSArrayOfPlayingAudioL = dart.constFn(_interceptors.JSArray$(T.PlayingAudioL())))(),
    AssetsAudioPlayerLToNull: () => (T.AssetsAudioPlayerLToNull = dart.constFn(dart.fnType(core.Null, [T.AssetsAudioPlayerL()])))(),
    AudioLAndAssetsAudioPlayerLToboolL: () => (T.AudioLAndAssetsAudioPlayerLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.AudioL(), T.AssetsAudioPlayerL()])))(),
    boolLToNull: () => (T.boolLToNull = dart.constFn(dart.fnType(core.Null, [T.boolL()])))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    ListOfAssetsAudioPlayerL: () => (T.ListOfAssetsAudioPlayerL = dart.constFn(core.List$(T.AssetsAudioPlayerL())))(),
    StreamSubscriptionLToNull: () => (T.StreamSubscriptionLToNull = dart.constFn(dart.fnType(core.Null, [T.StreamSubscriptionL()])))(),
    ReadingPlaylistL: () => (T.ReadingPlaylistL = dart.constFn(dart.legacy(playing$.ReadingPlaylist)))(),
    PlayerEditorL: () => (T.PlayerEditorL = dart.constFn(dart.legacy(assets_audio_player.PlayerEditor)))(),
    _HashSetOfPlayerEditorL: () => (T._HashSetOfPlayerEditorL = dart.constFn(collection._HashSet$(T.PlayerEditorL())))(),
    LinkedHashSetOfPlayerEditorL: () => (T.LinkedHashSetOfPlayerEditorL = dart.constFn(collection.LinkedHashSet$(T.PlayerEditorL())))(),
    AudioTypeL: () => (T.AudioTypeL = dart.constFn(dart.legacy(playable$.AudioType)))(),
    ImageTypeL: () => (T.ImageTypeL = dart.constFn(dart.legacy(playable$.ImageType)))(),
    MetasImageL: () => (T.MetasImageL = dart.constFn(dart.legacy(playable$.MetasImage)))(),
    MetasL: () => (T.MetasL = dart.constFn(dart.legacy(playable$.Metas)))(),
    PlayerEditorLToNull: () => (T.PlayerEditorLToNull = dart.constFn(dart.fnType(core.Null, [T.PlayerEditorL()])))(),
    JSArrayOfAudioL: () => (T.JSArrayOfAudioL = dart.constFn(_interceptors.JSArray$(T.AudioL())))(),
    PlaylistL: () => (T.PlaylistL = dart.constFn(dart.legacy(playable$.Playlist)))(),
    BehaviorSubjectOfPlayerStateL: () => (T.BehaviorSubjectOfPlayerStateL = dart.constFn(behavior_subject.BehaviorSubject$(T.PlayerStateL())))(),
    BehaviorSubjectOfPlayingL: () => (T.BehaviorSubjectOfPlayingL = dart.constFn(behavior_subject.BehaviorSubject$(T.PlayingL())))(),
    PublishSubjectOfPlayingL: () => (T.PublishSubjectOfPlayingL = dart.constFn(publish_subject.PublishSubject$(T.PlayingL())))(),
    BehaviorSubjectOfDurationL: () => (T.BehaviorSubjectOfDurationL = dart.constFn(behavior_subject.BehaviorSubject$(T.DurationL())))(),
    BehaviorSubjectOfdoubleL: () => (T.BehaviorSubjectOfdoubleL = dart.constFn(behavior_subject.BehaviorSubject$(T.doubleL())))(),
    BehaviorSubjectOfLoopModeL: () => (T.BehaviorSubjectOfLoopModeL = dart.constFn(behavior_subject.BehaviorSubject$(T.LoopModeL())))(),
    BehaviorSubjectOfRealtimePlayingInfosL: () => (T.BehaviorSubjectOfRealtimePlayingInfosL = dart.constFn(behavior_subject.BehaviorSubject$(T.RealtimePlayingInfosL())))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    MethodCallL: () => (T.MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))(),
    MethodCallLToFutureLOfNull: () => (T.MethodCallLToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [T.MethodCallL()])))(),
    ClickedNotificationWrapperL: () => (T.ClickedNotificationWrapperL = dart.constFn(dart.legacy(notification.ClickedNotificationWrapper)))(),
    ClickedNotificationWrapperLToNull: () => (T.ClickedNotificationWrapperLToNull = dart.constFn(dart.fnType(core.Null, [T.ClickedNotificationWrapperL()])))(),
    LinkedHashMapOfStringL$AssetsAudioPlayerL: () => (T.LinkedHashMapOfStringL$AssetsAudioPlayerL = dart.constFn(collection.LinkedHashMap$(T.StringL(), T.AssetsAudioPlayerL())))(),
    PlayingLToPlayingAudioL: () => (T.PlayingLToPlayingAudioL = dart.constFn(dart.fnType(T.PlayingAudioL(), [T.PlayingL()])))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    StreamL: () => (T.StreamL = dart.constFn(dart.legacy(async.Stream)))(),
    JSArrayOfStreamL: () => (T.JSArrayOfStreamL = dart.constFn(_interceptors.JSArray$(T.StreamL())))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    ListLToRealtimePlayingInfosL: () => (T.ListLToRealtimePlayingInfosL = dart.constFn(dart.fnType(T.RealtimePlayingInfosL(), [T.ListL()])))(),
    RealtimePlayingInfosLToNull: () => (T.RealtimePlayingInfosLToNull = dart.constFn(dart.fnType(core.Null, [T.RealtimePlayingInfosL()])))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    BehaviorSubjectOfClickedNotificationWrapperL: () => (T.BehaviorSubjectOfClickedNotificationWrapperL = dart.constFn(behavior_subject.BehaviorSubject$(T.ClickedNotificationWrapperL())))(),
    LinkedMapOfStringL$AssetsAudioPlayerL: () => (T.LinkedMapOfStringL$AssetsAudioPlayerL = dart.constFn(_js_helper.LinkedMap$(T.StringL(), T.AssetsAudioPlayerL())))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    intLToboolL: () => (T.intLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.intL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: loop.LoopMode.prototype,
        [_name]: "LoopMode.none",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 93,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "audio",
        [_Location_column]: 7,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "loopMode",
        [_Location_column]: 7,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "volume",
        [_Location_column]: 7,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "play",
        [_Location_column]: 7,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPositionChanged",
        [_Location_column]: 7,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onReadyToPlay",
        [_Location_column]: 7,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onFinished",
        [_Location_column]: 7,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialPosition",
        [_Location_column]: 7,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11], T._LocationL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 92,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/widget/audio_widget.dart"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 10,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 11,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 12,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16], T._LocationL());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[13] || CT.C13,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 9,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 20,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 21,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 22,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21], T._LocationL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[18] || CT.C18,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 19,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 30,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 31,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 32,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], T._LocationL());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[23] || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 29,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 41,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31], T._LocationL());
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[28] || CT.C28,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 39,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 50,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 51,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 52,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.constList([C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36], T._LocationL());
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[33] || CT.C33,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 49,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 61,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 62,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.constList([C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41], T._LocationL());
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[38] || CT.C38,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 59,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 70,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 71,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 72,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], T._LocationL());
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 69,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 81,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.constList([C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51], T._LocationL());
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[48] || CT.C48,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 79,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.constList([C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56], T._LocationL());
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[53] || CT.C53,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 89,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.constList([C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61], T._LocationL());
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[58] || CT.C58,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 99,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "player",
        [_Location_column]: 9,
        [_Location_line]: 113,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 114,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65, C[66] || CT.C66], T._LocationL());
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 111,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders_ext.dart"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.isPlaying",
        index: 0
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.volume",
        index: 1
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.currentPosition",
        index: 2
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.playSpeed",
        index: 3
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.forwardRewindSpeed",
        index: 4
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.current",
        index: 5
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.loopMode",
        index: 6
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.isBuffering",
        index: 7
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.realtimePlayingInfos",
        index: 8
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: player_builders._PlayingBuilderType.prototype,
        [_name$]: "_PlayingBuilderType.playerState",
        index: 9
      });
    },
    get C77() {
      return C[77] = dart.constList([C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76], T._PlayingBuilderTypeL());
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 115,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 117,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.constList([C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82], T._LocationL());
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[79] || CT.C79,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 114,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 125,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 126,
        [_Location_file]: null
      });
    },
    get C84() {
      return C[84] = dart.constList([C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87], T._LocationL());
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[84] || CT.C84,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 123,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 133,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.constList([C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92], T._LocationL());
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[89] || CT.C89,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 132,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 142,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 143,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 144,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.constList([C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97], T._LocationL());
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[94] || CT.C94,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 141,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 151,
        [_Location_file]: null
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 152,
        [_Location_file]: null
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 153,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.constList([C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102], T._LocationL());
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[99] || CT.C99,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 150,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 160,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 161,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 162,
        [_Location_file]: null
      });
    },
    get C104() {
      return C[104] = dart.constList([C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107], T._LocationL());
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[104] || CT.C104,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 159,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 169,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 171,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.constList([C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112], T._LocationL());
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[109] || CT.C109,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 168,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 178,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 179,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.constList([C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117], T._LocationL());
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[114] || CT.C114,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 177,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 187,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 188,
        [_Location_file]: null
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120, C[121] || CT.C121, C[122] || CT.C122], T._LocationL());
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[119] || CT.C119,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 186,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 196,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 197,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 198,
        [_Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.constList([C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127], T._LocationL());
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[124] || CT.C124,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 195,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C129() {
      return C[129] = dart.constList([], T._LocationL());
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[129] || CT.C129,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 204,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 11,
        [_Location_line]: 229,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialData",
        [_Location_column]: 11,
        [_Location_line]: 230,
        [_Location_file]: null
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 231,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.constList([C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134], T._LocationL());
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[131] || CT.C131,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 228,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[129] || CT.C129,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 238,
        [_Location_file]: "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/assets_audio_player-2.0.4+2/lib/src/builders/player_builders.dart"
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: applifecycle.PlayInBackground.prototype,
        [_name$0]: "PlayInBackground.enabled",
        index: 0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[139] || CT.C139
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[138] || CT.C138,
        [MethodChannel_name]: "assets_audio_player"
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: playable$.AudioType.prototype,
        [_name$1]: "AudioType.network",
        index: 0
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: playable$.AudioType.prototype,
        [_name$1]: "AudioType.liveStream",
        index: 1
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: playable$.AudioType.prototype,
        [_name$1]: "AudioType.file",
        index: 2
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: playable$.AudioType.prototype,
        [_name$1]: "AudioType.asset",
        index: 3
      });
    },
    get C145() {
      return C[145] = dart.constList([C[141] || CT.C141, C[142] || CT.C142, C[143] || CT.C143, C[144] || CT.C144], T.AudioTypeL());
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: playable$.ImageType.prototype,
        [_name$1]: "ImageType.network",
        index: 0
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: playable$.ImageType.prototype,
        [_name$1]: "ImageType.file",
        index: 1
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: playable$.ImageType.prototype,
        [_name$1]: "ImageType.asset",
        index: 2
      });
    },
    get C149() {
      return C[149] = dart.constList([C[146] || CT.C146, C[147] || CT.C147, C[148] || CT.C148], T.ImageTypeL());
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: assets_audio_player.PlayerState.prototype,
        [_name$2]: "PlayerState.play",
        index: 0
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: assets_audio_player.PlayerState.prototype,
        [_name$2]: "PlayerState.pause",
        index: 1
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: assets_audio_player.PlayerState.prototype,
        [_name$2]: "PlayerState.stop",
        index: 2
      });
    },
    get C153() {
      return C[153] = dart.constList([C[150] || CT.C150, C[151] || CT.C151, C[152] || CT.C152], T.PlayerStateL());
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[138] || CT.C138,
        [MethodChannel_name]: "assets_audio_player_notification"
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: applifecycle.PlayInBackground.prototype,
        [_name$0]: "PlayInBackground.disabledPause",
        index: 1
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: applifecycle.PlayInBackground.prototype,
        [_name$0]: "PlayInBackground.disabledRestoreOnForeground",
        index: 2
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: notification.NotificationSettings.prototype,
        [customStopIcon$]: null,
        [customPauseIcon$]: null,
        [customPlayIcon$]: null,
        [customPreviousIcon$]: null,
        [customNextIcon$]: null,
        [customStopAction$]: null,
        [customPrevAction$]: null,
        [customPlayPauseAction$]: null,
        [customNextAction$]: null,
        [stopEnabled$]: true,
        [seekBarEnabled$]: true,
        [prevEnabled$]: true,
        [playPauseEnabled$]: true,
        [nextEnabled$]: true
      });
    }
  }, false);
  var C = Array(158).fill(void 0);
  var I = [
    "package:assets_audio_player/src/widget/audio_widget.dart",
    "package:assets_audio_player/src/builders/player_builders.dart",
    "package:assets_audio_player/src/player_group.dart",
    "package:assets_audio_player/src/playing.dart",
    "package:assets_audio_player/src/playable.dart",
    "package:assets_audio_player/src/notification.dart",
    "package:assets_audio_player/src/assets_audio_player.dart"
  ];
  var child$ = dart.privateName(audio_widget, "AudioWidget.child");
  var audio$ = dart.privateName(audio_widget, "AudioWidget.audio");
  var volume$ = dart.privateName(audio_widget, "AudioWidget.volume");
  var play$ = dart.privateName(audio_widget, "AudioWidget.play");
  var loopMode$ = dart.privateName(audio_widget, "AudioWidget.loopMode");
  var onPositionChanged$ = dart.privateName(audio_widget, "AudioWidget.onPositionChanged");
  var onReadyToPlay$ = dart.privateName(audio_widget, "AudioWidget.onReadyToPlay");
  var onFinished$ = dart.privateName(audio_widget, "AudioWidget.onFinished");
  var initialPosition$ = dart.privateName(audio_widget, "AudioWidget.initialPosition");
  var _name = dart.privateName(loop, "_name");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  audio_widget.AudioWidget = class AudioWidget extends framework.StatefulWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get audio() {
      return this[audio$];
    }
    set audio(value) {
      super.audio = value;
    }
    get volume() {
      return this[volume$];
    }
    set volume(value) {
      super.volume = value;
    }
    get play() {
      return this[play$];
    }
    set play(value) {
      super.play = value;
    }
    get loopMode() {
      return this[loopMode$];
    }
    set loopMode(value) {
      super.loopMode = value;
    }
    get onPositionChanged() {
      return this[onPositionChanged$];
    }
    set onPositionChanged(value) {
      super.onPositionChanged = value;
    }
    get onReadyToPlay() {
      return this[onReadyToPlay$];
    }
    set onReadyToPlay(value) {
      super.onReadyToPlay = value;
    }
    get onFinished() {
      return this[onFinished$];
    }
    set onFinished(value) {
      super.onFinished = value;
    }
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    createState() {
      return new audio_widget._AudioWidgetState.new();
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let child = opts && 'child' in opts ? opts.child : null;
      let audio = opts && 'audio' in opts ? opts.audio : null;
      let volume = opts && 'volume' in opts ? opts.volume : null;
      let play = opts && 'play' in opts ? opts.play : null;
      let loopMode = opts && 'loopMode' in opts ? opts.loopMode : null;
      let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
      let onReadyToPlay = opts && 'onReadyToPlay' in opts ? opts.onReadyToPlay : null;
      let onFinished = opts && 'onFinished' in opts ? opts.onFinished : null;
      let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
      let controlledByPlaylist = opts && 'controlledByPlaylist' in opts ? opts.controlledByPlaylist : null;
      return new audio_widget.AudioWidget.new({child: (t0 = child, t0 == null ? this.child : t0), audio: (t0$ = audio, t0$ == null ? this.audio : t0$), loopMode: (t0$0 = loopMode, t0$0 == null ? this.loopMode : t0$0), volume: (t0$1 = volume, t0$1 == null ? this.volume : t0$1), play: (t0$2 = play, t0$2 == null ? this.play : t0$2), onPositionChanged: (t0$3 = onPositionChanged, t0$3 == null ? this.onPositionChanged : t0$3), onReadyToPlay: (t0$4 = onReadyToPlay, t0$4 == null ? this.onReadyToPlay : t0$4), onFinished: (t0$5 = onFinished, t0$5 == null ? this.onFinished : t0$5), initialPosition: (t0$6 = initialPosition, t0$6 == null ? this.initialPosition : t0$6), $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
    }
  };
  (audio_widget.AudioWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let audio = opts && 'audio' in opts ? opts.audio : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let volume = opts && 'volume' in opts ? opts.volume : 1;
    let play = opts && 'play' in opts ? opts.play : true;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
    let onReadyToPlay = opts && 'onReadyToPlay' in opts ? opts.onReadyToPlay : null;
    let onFinished = opts && 'onFinished' in opts ? opts.onFinished : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[audio$] = audio;
    this[child$] = child;
    this[volume$] = volume;
    this[play$] = play;
    this[loopMode$] = loopMode;
    this[onPositionChanged$] = onPositionChanged;
    this[initialPosition$] = initialPosition;
    this[onReadyToPlay$] = onReadyToPlay;
    this[onFinished$] = onFinished;
    audio_widget.AudioWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = audio_widget.AudioWidget.prototype;
  (audio_widget.AudioWidget.assets = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let volume = opts && 'volume' in opts ? opts.volume : 1;
    let play = opts && 'play' in opts ? opts.play : true;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
    let onReadyToPlay = opts && 'onReadyToPlay' in opts ? opts.onReadyToPlay : null;
    let onFinished = opts && 'onFinished' in opts ? opts.onFinished : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[volume$] = volume;
    this[play$] = play;
    this[loopMode$] = loopMode;
    this[onPositionChanged$] = onPositionChanged;
    this[initialPosition$] = initialPosition;
    this[onReadyToPlay$] = onReadyToPlay;
    this[onFinished$] = onFinished;
    this[audio$] = new playable$.Audio.new(path, {package: $package});
    audio_widget.AudioWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = audio_widget.AudioWidget.prototype;
  (audio_widget.AudioWidget.network = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let volume = opts && 'volume' in opts ? opts.volume : 1;
    let play = opts && 'play' in opts ? opts.play : true;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
    let onReadyToPlay = opts && 'onReadyToPlay' in opts ? opts.onReadyToPlay : null;
    let onFinished = opts && 'onFinished' in opts ? opts.onFinished : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[volume$] = volume;
    this[play$] = play;
    this[loopMode$] = loopMode;
    this[onPositionChanged$] = onPositionChanged;
    this[initialPosition$] = initialPosition;
    this[onReadyToPlay$] = onReadyToPlay;
    this[onFinished$] = onFinished;
    this[audio$] = new playable$.Audio.network(url);
    audio_widget.AudioWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = audio_widget.AudioWidget.prototype;
  (audio_widget.AudioWidget.file = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let volume = opts && 'volume' in opts ? opts.volume : 1;
    let play = opts && 'play' in opts ? opts.play : true;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let initialPosition = opts && 'initialPosition' in opts ? opts.initialPosition : null;
    let onReadyToPlay = opts && 'onReadyToPlay' in opts ? opts.onReadyToPlay : null;
    let onFinished = opts && 'onFinished' in opts ? opts.onFinished : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[volume$] = volume;
    this[play$] = play;
    this[loopMode$] = loopMode;
    this[onPositionChanged$] = onPositionChanged;
    this[initialPosition$] = initialPosition;
    this[onReadyToPlay$] = onReadyToPlay;
    this[onFinished$] = onFinished;
    this[audio$] = new playable$.Audio.network(path);
    audio_widget.AudioWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = audio_widget.AudioWidget.prototype;
  dart.addTypeTests(audio_widget.AudioWidget);
  dart.addTypeCaches(audio_widget.AudioWidget);
  dart.setMethodSignature(audio_widget.AudioWidget, () => ({
    __proto__: dart.getMethods(audio_widget.AudioWidget.__proto__),
    createState: dart.fnType(dart.legacy(audio_widget._AudioWidgetState), []),
    copyWith: dart.fnType(dart.legacy(audio_widget.AudioWidget), [], {audio: dart.legacy(playable$.Audio), child: dart.legacy(framework.Widget), controlledByPlaylist: dart.legacy(core.bool), initialPosition: dart.legacy(core.Duration), loopMode: dart.legacy(loop.LoopMode), onFinished: dart.legacy(dart.fnType(dart.dynamic, [])), onPositionChanged: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.Duration), dart.legacy(core.Duration)])), onReadyToPlay: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.Duration)])), play: dart.legacy(core.bool), volume: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(audio_widget.AudioWidget, I[0]);
  dart.setFieldSignature(audio_widget.AudioWidget, () => ({
    __proto__: dart.getFields(audio_widget.AudioWidget.__proto__),
    child: dart.finalFieldType(dart.legacy(framework.Widget)),
    audio: dart.finalFieldType(dart.legacy(playable$.Audio)),
    volume: dart.finalFieldType(dart.legacy(core.double)),
    play: dart.finalFieldType(dart.legacy(core.bool)),
    loopMode: dart.finalFieldType(dart.legacy(loop.LoopMode)),
    onPositionChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.Duration), dart.legacy(core.Duration)]))),
    onReadyToPlay: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(core.Duration)]))),
    onFinished: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, []))),
    initialPosition: dart.finalFieldType(dart.legacy(core.Duration))
  }));
  var _player = dart.privateName(audio_widget, "_player");
  var _currentPositionSubscription = dart.privateName(audio_widget, "_currentPositionSubscription");
  var _onReadyToPlaySubscription = dart.privateName(audio_widget, "_onReadyToPlaySubscription");
  var _playlistAudioFinishedSubscription = dart.privateName(audio_widget, "_playlistAudioFinishedSubscription");
  var _totalDuration = dart.privateName(audio_widget, "_totalDuration");
  var _open = dart.privateName(audio_widget, "_open");
  var _clearSubscriptions = dart.privateName(audio_widget, "_clearSubscriptions");
  audio_widget._AudioWidgetState = class _AudioWidgetState extends framework.State$(dart.legacy(audio_widget.AudioWidget)) {
    initState() {
      super.initState();
      this[_player] = assets_audio_player.AssetsAudioPlayer.newPlayer();
      this[_open]();
    }
    [_open]() {
      let t0, t0$;
      this[_player].open(this.widget.audio, {autoStart: this.widget.play, volume: this.widget.volume, seek: this.widget.initialPosition, loopMode: this.widget.loopMode});
      t0 = this[_onReadyToPlaySubscription];
      t0 == null ? null : t0.cancel();
      this[_onReadyToPlaySubscription] = null;
      this[_onReadyToPlaySubscription] = this[_player].onReadyToPlay.listen(dart.fn(audio => {
        let t1, t0;
        if (this.widget.onReadyToPlay != null) {
          this[_totalDuration] = audio.duration;
          t0 = this.widget;
          t1 = this[_totalDuration];
          t0.onReadyToPlay(t1);
        }
      }, T.PlayingAudioLToNull()));
      t0$ = this[_playlistAudioFinishedSubscription];
      t0$ == null ? null : t0$.cancel();
      this[_playlistAudioFinishedSubscription] = null;
      this[_playlistAudioFinishedSubscription] = this[_player].playlistAudioFinished.listen(dart.fn(event => {
        if (this.widget.onFinished != null) {
          this.widget.onFinished();
        }
      }, T.PlayingLToNull()));
      this[_currentPositionSubscription] = this[_player].currentPosition.listen(dart.fn(current => {
        let t2, t1, t0;
        if (current != null && this[_totalDuration] != null) {
          t0 = this.widget;
          t1 = current;
          t2 = this[_totalDuration];
          t0.onPositionChanged(t1, t2);
        }
      }, T.DurationLToNull()));
    }
    didUpdateWidget(oldWidget) {
      T.AudioWidgetL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.audio, oldWidget.audio)) {
        this[_player].stop();
        this[_clearSubscriptions]();
        this[_open]();
      } else {
        if (this.widget.play != oldWidget.play) {
          if (dart.test(this.widget.play)) {
            this[_player].play();
          } else {
            this[_player].pause();
          }
        }
        if (this.widget.volume != oldWidget.volume) {
          this[_player].setVolume(this.widget.volume);
        }
        if (this.widget.loopMode != oldWidget.loopMode) {
          this[_player].setLoopMode(this.widget.loopMode);
        }
        if (!dart.equals(this.widget.initialPosition, oldWidget.initialPosition)) {
          this[_player].seek(this.widget.initialPosition);
        }
      }
    }
    build(context) {
      return this.widget.child;
    }
    [_clearSubscriptions]() {
      let t0, t0$, t0$0;
      t0 = this[_currentPositionSubscription];
      t0 == null ? null : t0.cancel();
      this[_currentPositionSubscription] = null;
      t0$ = this[_playlistAudioFinishedSubscription];
      t0$ == null ? null : t0$.cancel();
      this[_playlistAudioFinishedSubscription] = null;
      t0$0 = this[_onReadyToPlaySubscription];
      t0$0 == null ? null : t0$0.cancel();
      this[_onReadyToPlaySubscription] = null;
    }
    dispose() {
      this[_player].stop();
      this[_player].dispose();
      this[_clearSubscriptions]();
      super.dispose();
    }
  };
  (audio_widget._AudioWidgetState.new = function() {
    this[_player] = null;
    this[_currentPositionSubscription] = null;
    this[_onReadyToPlaySubscription] = null;
    this[_playlistAudioFinishedSubscription] = null;
    this[_totalDuration] = null;
    audio_widget._AudioWidgetState.__proto__.new.call(this);
    ;
  }).prototype = audio_widget._AudioWidgetState.prototype;
  dart.addTypeTests(audio_widget._AudioWidgetState);
  dart.addTypeCaches(audio_widget._AudioWidgetState);
  dart.setMethodSignature(audio_widget._AudioWidgetState, () => ({
    __proto__: dart.getMethods(audio_widget._AudioWidgetState.__proto__),
    [_open]: dart.fnType(dart.void, []),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_clearSubscriptions]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(audio_widget._AudioWidgetState, I[0]);
  dart.setFieldSignature(audio_widget._AudioWidgetState, () => ({
    __proto__: dart.getFields(audio_widget._AudioWidgetState.__proto__),
    [_player]: dart.fieldType(dart.legacy(assets_audio_player.AssetsAudioPlayer)),
    [_currentPositionSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_onReadyToPlaySubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_playlistAudioFinishedSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_totalDuration]: dart.fieldType(dart.legacy(core.Duration))
  }));
  player_builders_ext['AssetAudioPlayerBuilder|builderIsPlaying'] = function AssetAudioPlayerBuilder$124builderIsPlaying($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.isPlaying({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[12] || CT.C12});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderIsPlaying'] = function AssetAudioPlayerBuilder$124get$35builderIsPlaying($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderIsPlaying']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderIsBuffering'] = function AssetAudioPlayerBuilder$124builderIsBuffering($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.isBuffering({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[17] || CT.C17});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderIsBuffering'] = function AssetAudioPlayerBuilder$124get$35builderIsBuffering($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderIsBuffering']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderLoopMode'] = function AssetAudioPlayerBuilder$124builderLoopMode($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.loopMode({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[22] || CT.C22});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderLoopMode'] = function AssetAudioPlayerBuilder$124get$35builderLoopMode($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderLoopMode']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$1());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderRealtimePlayingInfos'] = function AssetAudioPlayerBuilder$124builderRealtimePlayingInfos($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.realtimePlayingInfos({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[27] || CT.C27});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderRealtimePlayingInfos'] = function AssetAudioPlayerBuilder$124get$35builderRealtimePlayingInfos($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderRealtimePlayingInfos']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$2());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderVolume'] = function AssetAudioPlayerBuilder$124builderVolume($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.volume({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[32] || CT.C32});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderVolume'] = function AssetAudioPlayerBuilder$124get$35builderVolume($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderVolume']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$3());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderPlaySpeed'] = function AssetAudioPlayerBuilder$124builderPlaySpeed($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.playSpeed({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[37] || CT.C37});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderPlaySpeed'] = function AssetAudioPlayerBuilder$124get$35builderPlaySpeed($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderPlaySpeed']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$3());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderCurrentPosition'] = function AssetAudioPlayerBuilder$124builderCurrentPosition($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.currentPosition({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[42] || CT.C42});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderCurrentPosition'] = function AssetAudioPlayerBuilder$124get$35builderCurrentPosition($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderCurrentPosition']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$4());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderForwardRewindSpeed'] = function AssetAudioPlayerBuilder$124builderForwardRewindSpeed($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.forwardRewindSpeed({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[47] || CT.C47});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderForwardRewindSpeed'] = function AssetAudioPlayerBuilder$124get$35builderForwardRewindSpeed($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderForwardRewindSpeed']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$3());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderCurrent'] = function AssetAudioPlayerBuilder$124builderCurrent($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.current({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[52] || CT.C52});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderCurrent'] = function AssetAudioPlayerBuilder$124get$35builderCurrent($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderCurrent']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$5());
  };
  player_builders_ext['AssetAudioPlayerBuilder|builderPlayerState'] = function AssetAudioPlayerBuilder$124builderPlayerState($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerBuilder.playerState({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[57] || CT.C57});
  };
  player_builders_ext['AssetAudioPlayerBuilder|get#builderPlayerState'] = function AssetAudioPlayerBuilder$124get$35builderPlayerState($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerBuilder|builderPlayerState']($this, {key: key, builder: builder});
    }, T.__ToPlayerBuilderL$6());
  };
  player_builders_ext['AssetAudioPlayerGroupBuilder|builderIsPlaying'] = function AssetAudioPlayerGroupBuilder$124builderIsPlaying($this, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return new player_builders.PlayerGroupBuilder.isPlaying({key: key, player: $this, builder: builder, $creationLocationd_0dea112b090073317d4: C[62] || CT.C62});
  };
  player_builders_ext['AssetAudioPlayerGroupBuilder|get#builderIsPlaying'] = function AssetAudioPlayerGroupBuilder$124get$35builderIsPlaying($this) {
    return dart.fn(opts => {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return player_builders_ext['AssetAudioPlayerGroupBuilder|builderIsPlaying']($this, {key: key, builder: builder});
    }, T.__ToPlayerGroupBuilderL());
  };
  var _name$ = dart.privateName(player_builders, "_name");
  player_builders._PlayingBuilderType = class _PlayingBuilderType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (player_builders._PlayingBuilderType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = player_builders._PlayingBuilderType.prototype;
  dart.addTypeTests(player_builders._PlayingBuilderType);
  dart.addTypeCaches(player_builders._PlayingBuilderType);
  dart.setMethodSignature(player_builders._PlayingBuilderType, () => ({
    __proto__: dart.getMethods(player_builders._PlayingBuilderType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(player_builders._PlayingBuilderType, I[1]);
  dart.setFieldSignature(player_builders._PlayingBuilderType, () => ({
    __proto__: dart.getFields(player_builders._PlayingBuilderType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(player_builders._PlayingBuilderType, ['toString']);
  player_builders._PlayingBuilderType.isPlaying = C[67] || CT.C67;
  player_builders._PlayingBuilderType.volume = C[68] || CT.C68;
  player_builders._PlayingBuilderType.currentPosition = C[69] || CT.C69;
  player_builders._PlayingBuilderType.playSpeed = C[70] || CT.C70;
  player_builders._PlayingBuilderType.forwardRewindSpeed = C[71] || CT.C71;
  player_builders._PlayingBuilderType.current = C[72] || CT.C72;
  player_builders._PlayingBuilderType.loopMode = C[73] || CT.C73;
  player_builders._PlayingBuilderType.isBuffering = C[74] || CT.C74;
  player_builders._PlayingBuilderType.realtimePlayingInfos = C[75] || CT.C75;
  player_builders._PlayingBuilderType.playerState = C[76] || CT.C76;
  player_builders._PlayingBuilderType.values = C[77] || CT.C77;
  var player$ = dart.privateName(player_builders, "PlayerBuilder.player");
  var builder$ = dart.privateName(player_builders, "PlayerBuilder.builder");
  var builderType = dart.privateName(player_builders, "PlayerBuilder.builderType");
  player_builders.PlayerBuilder = class PlayerBuilder extends framework.StatefulWidget {
    get player() {
      return this[player$];
    }
    set player(value) {
      super.player = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get builderType() {
      return this[builderType];
    }
    set builderType(value) {
      super.builderType = value;
    }
    createState() {
      return new player_builders._PlayerBuilderState.new();
    }
  };
  (player_builders.PlayerBuilder.isPlaying = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.isPlaying;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.isBuffering = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.isBuffering;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.loopMode = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.loopMode;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.realtimePlayingInfos = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.realtimePlayingInfos;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.volume = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.volume;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.playSpeed = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.playSpeed;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.currentPosition = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.currentPosition;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.forwardRewindSpeed = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.forwardRewindSpeed;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.current = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.current;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  (player_builders.PlayerBuilder.playerState = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$] = player;
    this[builder$] = builder;
    this[builderType] = player_builders._PlayingBuilderType.playerState;
    player_builders.PlayerBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerBuilder.prototype;
  dart.addTypeTests(player_builders.PlayerBuilder);
  dart.addTypeCaches(player_builders.PlayerBuilder);
  dart.setMethodSignature(player_builders.PlayerBuilder, () => ({
    __proto__: dart.getMethods(player_builders.PlayerBuilder.__proto__),
    createState: dart.fnType(dart.legacy(player_builders._PlayerBuilderState), [])
  }));
  dart.setLibraryUri(player_builders.PlayerBuilder, I[1]);
  dart.setFieldSignature(player_builders.PlayerBuilder, () => ({
    __proto__: dart.getFields(player_builders.PlayerBuilder.__proto__),
    player: dart.finalFieldType(dart.legacy(assets_audio_player.AssetsAudioPlayer)),
    builder: dart.finalFieldType(dart.dynamic),
    builderType: dart.finalFieldType(dart.legacy(player_builders._PlayingBuilderType))
  }));
  player_builders._PlayerBuilderState = class _PlayerBuilderState extends framework.State$(dart.legacy(player_builders.PlayerBuilder)) {
    build(context) {
      switch (this.widget.builderType) {
        case C[67] || CT.C67:
        {
          return new (T.StreamBuilderOfboolL()).new({stream: this.widget.player.isPlaying, initialData: false, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[78] || CT.C78});
          break;
        }
        case C[74] || CT.C74:
        {
          return new (T.StreamBuilderOfboolL()).new({stream: this.widget.player.isBuffering, initialData: false, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[83] || CT.C83});
          break;
        }
        case C[73] || CT.C73:
        {
          return new (T.StreamBuilderOfLoopModeL()).new({stream: this.widget.player.loopMode, initialData: loop.LoopMode.none, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[88] || CT.C88});
          break;
        }
        case C[68] || CT.C68:
        {
          return new (T.StreamBuilderOfdoubleL()).new({stream: this.widget.player.volume, initialData: assets_audio_player.AssetsAudioPlayer.defaultVolume, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[93] || CT.C93});
          break;
        }
        case C[69] || CT.C69:
        {
          return new (T.StreamBuilderOfDurationL()).new({stream: this.widget.player.currentPosition, initialData: core.Duration.zero, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[98] || CT.C98});
          break;
        }
        case C[70] || CT.C70:
        {
          return new (T.StreamBuilderOfdoubleL()).new({stream: this.widget.player.playSpeed, initialData: assets_audio_player.AssetsAudioPlayer.defaultPlaySpeed, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[103] || CT.C103});
          break;
        }
        case C[71] || CT.C71:
        {
          return new (T.StreamBuilderOfdoubleL()).new({stream: this.widget.player.forwardRewindSpeed, initialData: null, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[108] || CT.C108});
          break;
        }
        case C[72] || CT.C72:
        {
          return new (T.StreamBuilderOfPlayingL()).new({stream: this.widget.player.current, initialData: null, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[113] || CT.C113});
          break;
        }
        case C[75] || CT.C75:
        {
          return new (T.StreamBuilderOfRealtimePlayingInfosL()).new({stream: this.widget.player.realtimePlayingInfos, initialData: null, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[118] || CT.C118});
          break;
        }
        case C[76] || CT.C76:
        {
          return new (T.StreamBuilderOfPlayerStateL()).new({stream: this.widget.player.playerState, initialData: assets_audio_player.PlayerState.stop, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[123] || CT.C123});
          break;
        }
      }
      return new basic.SizedBox.new({$creationLocationd_0dea112b090073317d4: C[128] || CT.C128});
    }
  };
  (player_builders._PlayerBuilderState.new = function() {
    player_builders._PlayerBuilderState.__proto__.new.call(this);
    ;
  }).prototype = player_builders._PlayerBuilderState.prototype;
  dart.addTypeTests(player_builders._PlayerBuilderState);
  dart.addTypeCaches(player_builders._PlayerBuilderState);
  dart.setMethodSignature(player_builders._PlayerBuilderState, () => ({
    __proto__: dart.getMethods(player_builders._PlayerBuilderState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(player_builders._PlayerBuilderState, I[1]);
  var player$0 = dart.privateName(player_builders, "PlayerGroupBuilder.player");
  var builder$0 = dart.privateName(player_builders, "PlayerGroupBuilder.builder");
  var builderType$ = dart.privateName(player_builders, "PlayerGroupBuilder.builderType");
  player_builders.PlayerGroupBuilder = class PlayerGroupBuilder extends framework.StatefulWidget {
    get player() {
      return this[player$0];
    }
    set player(value) {
      super.player = value;
    }
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    get builderType() {
      return this[builderType$];
    }
    set builderType(value) {
      super.builderType = value;
    }
    createState() {
      return new player_builders._PlayerBuilderGroupState.new();
    }
  };
  (player_builders.PlayerGroupBuilder.isPlaying = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let player = opts && 'player' in opts ? opts.player : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[player$0] = player;
    this[builder$0] = builder;
    this[builderType$] = player_builders._PlayingBuilderType.isPlaying;
    player_builders.PlayerGroupBuilder.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = player_builders.PlayerGroupBuilder.prototype;
  dart.addTypeTests(player_builders.PlayerGroupBuilder);
  dart.addTypeCaches(player_builders.PlayerGroupBuilder);
  dart.setMethodSignature(player_builders.PlayerGroupBuilder, () => ({
    __proto__: dart.getMethods(player_builders.PlayerGroupBuilder.__proto__),
    createState: dart.fnType(dart.legacy(framework.State$(dart.legacy(framework.StatefulWidget))), [])
  }));
  dart.setLibraryUri(player_builders.PlayerGroupBuilder, I[1]);
  dart.setFieldSignature(player_builders.PlayerGroupBuilder, () => ({
    __proto__: dart.getFields(player_builders.PlayerGroupBuilder.__proto__),
    player: dart.finalFieldType(dart.legacy(player_group.AssetsAudioPlayerGroup)),
    builder: dart.finalFieldType(dart.dynamic),
    builderType: dart.finalFieldType(dart.legacy(player_builders._PlayingBuilderType))
  }));
  player_builders._PlayerBuilderGroupState = class _PlayerBuilderGroupState extends framework.State$(dart.legacy(player_builders.PlayerGroupBuilder)) {
    build(context) {
      switch (this.widget.builderType) {
        case C[67] || CT.C67:
        {
          return new (T.StreamBuilderOfboolL()).new({stream: this.widget.player.isPlaying, initialData: false, builder: dart.fn((context, snap) => {
              let t24, t23, t22;
              return T.WidgetL().as((t22 = this.widget, t23 = context, t24 = snap.data, dart.dsend(t22, 'builder', [t23, t24])));
            }, T.BuildContextLAndAsyncSnapshotLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[130] || CT.C130});
          break;
        }
        default:
      }
      return new basic.SizedBox.new({$creationLocationd_0dea112b090073317d4: C[135] || CT.C135});
    }
  };
  (player_builders._PlayerBuilderGroupState.new = function() {
    player_builders._PlayerBuilderGroupState.__proto__.new.call(this);
    ;
  }).prototype = player_builders._PlayerBuilderGroupState.prototype;
  dart.addTypeTests(player_builders._PlayerBuilderGroupState);
  dart.addTypeCaches(player_builders._PlayerBuilderGroupState);
  dart.setMethodSignature(player_builders._PlayerBuilderGroupState, () => ({
    __proto__: dart.getMethods(player_builders._PlayerBuilderGroupState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(player_builders._PlayerBuilderGroupState, I[1]);
  var playerGroup$ = dart.privateName(player_group, "AudioFinished.playerGroup");
  var audio$0 = dart.privateName(player_group, "AudioFinished.audio");
  player_group.AudioFinished = class AudioFinished extends core.Object {
    get playerGroup() {
      return this[playerGroup$];
    }
    set playerGroup(value) {
      super.playerGroup = value;
    }
    get audio() {
      return this[audio$0];
    }
    set audio(value) {
      super.audio = value;
    }
  };
  (player_group.AudioFinished.new = function(playerGroup, audio) {
    this[playerGroup$] = playerGroup;
    this[audio$0] = audio;
    ;
  }).prototype = player_group.AudioFinished.prototype;
  dart.addTypeTests(player_group.AudioFinished);
  dart.addTypeCaches(player_group.AudioFinished);
  dart.setLibraryUri(player_group.AudioFinished, I[2]);
  dart.setFieldSignature(player_group.AudioFinished, () => ({
    __proto__: dart.getFields(player_group.AudioFinished.__proto__),
    playerGroup: dart.finalFieldType(dart.legacy(player_group.AssetsAudioPlayerGroup)),
    audio: dart.finalFieldType(dart.legacy(playing$.PlayingAudio))
  }));
  var showNotification$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.showNotification");
  var respectSilentMode$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.respectSilentMode");
  var notificationStopEnabled$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.notificationStopEnabled");
  var playInBackground$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.playInBackground");
  var updateNotification$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.updateNotification");
  var onNotificationOpened$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.onNotificationOpened");
  var onNotificationPlay$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.onNotificationPlay");
  var onNotificationPause$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.onNotificationPause");
  var onNotificationStop$ = dart.privateName(player_group, "AssetsAudioPlayerGroup.onNotificationStop");
  var _name$0 = dart.privateName(applifecycle, "_name");
  var _sendChannel = dart.privateName(player_group, "_sendChannel");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var _audiosWithPlayers = dart.privateName(player_group, "_audiosWithPlayers");
  var _subscriptions = dart.privateName(player_group, "_subscriptions");
  var _isPlaying = dart.privateName(player_group, "_isPlaying");
  var __notificationSettings = dart.privateName(player_group, "__notificationSettings");
  var _pause = dart.privateName(player_group, "_pause");
  var _play = dart.privateName(player_group, "_play");
  var _stop = dart.privateName(player_group, "_stop");
  var _notificationSettings = dart.privateName(player_group, "_notificationSettings");
  var _addPlayer = dart.privateName(player_group, "_addPlayer");
  var _onPlayersChanged = dart.privateName(player_group, "_onPlayersChanged");
  var _removePlayer = dart.privateName(player_group, "_removePlayer");
  player_group.AssetsAudioPlayerGroup = class AssetsAudioPlayerGroup extends core.Object {
    get showNotification() {
      return this[showNotification$];
    }
    set showNotification(value) {
      super.showNotification = value;
    }
    get respectSilentMode() {
      return this[respectSilentMode$];
    }
    set respectSilentMode(value) {
      super.respectSilentMode = value;
    }
    get notificationStopEnabled() {
      return this[notificationStopEnabled$];
    }
    set notificationStopEnabled(value) {
      super.notificationStopEnabled = value;
    }
    get playInBackground() {
      return this[playInBackground$];
    }
    set playInBackground(value) {
      super.playInBackground = value;
    }
    get updateNotification() {
      return this[updateNotification$];
    }
    set updateNotification(value) {
      super.updateNotification = value;
    }
    get onNotificationOpened() {
      return this[onNotificationOpened$];
    }
    set onNotificationOpened(value) {
      super.onNotificationOpened = value;
    }
    get onNotificationPlay() {
      return this[onNotificationPlay$];
    }
    set onNotificationPlay(value) {
      super.onNotificationPlay = value;
    }
    get onNotificationPause() {
      return this[onNotificationPause$];
    }
    set onNotificationPause(value) {
      super.onNotificationPause = value;
    }
    get onNotificationStop() {
      return this[onNotificationStop$];
    }
    set onNotificationStop(value) {
      super.onNotificationStop = value;
    }
    get audiosWithPlayers() {
      return T.LinkedHashMapOfAudioL$AssetsAudioPlayerL().from(this[_audiosWithPlayers]);
    }
    get audios() {
      return this[_audiosWithPlayers][$keys][$toList]();
    }
    get players() {
      return this[_audiosWithPlayers][$values][$toList]();
    }
    get isPlaying() {
      return this[_isPlaying].stream;
    }
    get playingAudios() {
      let t22, t22$;
      let audios = T.JSArrayOfPlayingAudioL().of([]);
      for (let player of this.players) {
        let audio = (t22$ = (t22 = player.current, t22 == null ? null : t22.value), t22$ == null ? null : t22$.audio);
        if (audio != null) {
          audios[$add](audio);
        }
      }
      return audios;
    }
    get [_notificationSettings]() {
      if (this[__notificationSettings] == null) {
        this[__notificationSettings] = new notification.NotificationSettings.new({stopEnabled: this.notificationStopEnabled, seekBarEnabled: false, nextEnabled: false, prevEnabled: false, customPlayPauseAction: dart.fn(player => {
            let t22, t22$;
            if (dart.test(player.isPlaying.value)) {
              if (this.onNotificationPause != null) {
                t22 = this.playingAudios;
                this.onNotificationPause(this, t22);
              } else {
                this[_pause]();
              }
            } else {
              if (this.onNotificationPlay != null) {
                t22$ = this.playingAudios;
                this.onNotificationPlay(this, t22$);
              } else {
                this[_play]();
              }
            }
          }, T.AssetsAudioPlayerLToNull()), customStopAction: dart.fn(player => {
            let t22;
            if (this.onNotificationStop != null) {
              t22 = this.playingAudios;
              this.onNotificationStop(this, t22);
            } else {
              this[_stop]();
            }
          }, T.AssetsAudioPlayerLToNull())});
      }
      return this[__notificationSettings];
    }
    add(audio, opts) {
      let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
      let volume = opts && 'volume' in opts ? opts.volume : null;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
      return async.async(dart.void, (function* add() {
        let player = assets_audio_player.AssetsAudioPlayer.newPlayer();
        player.open(audio, {showNotification: false, seek: seek, autoStart: this.isPlaying.value, volume: volume, loopMode: loopMode, respectSilentMode: this.respectSilentMode, playInBackground: this.playInBackground, playSpeed: playSpeed, notificationSettings: this[_notificationSettings]});
        yield this[_addPlayer](audio, player);
      }).bind(this));
    }
    addAll(audios) {
      return async.async(dart.void, (function* addAll() {
        for (let audio of audios)
          yield this.add(audio);
      }).bind(this));
    }
    removeAudio(audio) {
      return async.async(dart.void, (function* removeAudio() {
        this[_audiosWithPlayers][$remove](audio);
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    [_removePlayer](player) {
      return async.async(dart.void, (function* _removePlayer() {
        this[_audiosWithPlayers][$removeWhere](dart.fn((audio, p) => dart.equals(player, p), T.AudioLAndAssetsAudioPlayerLToboolL()));
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    [_addPlayer](audio, player) {
      return async.async(dart.void, (function* _addPlayer() {
        let finishedSubscription = null;
        finishedSubscription = player.playlistFinished.listen(dart.fn(finished => {
          if (dart.test(finished)) {
            finishedSubscription.cancel();
            this[_subscriptions][$remove](finishedSubscription);
            this[_removePlayer](player);
          }
        }, T.boolLToNull()));
        this[_subscriptions][$add](finishedSubscription);
        this[_audiosWithPlayers][$_set](audio, player);
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    [_onPlayersChanged]() {
      return async.async(dart.void, (function* _onPlayersChanged() {
        let t22, t22$;
        if (this.updateNotification != null) {
          let isPlaying = this.isPlaying.value;
          let newNotificationsMetas = (yield (t22 = this.playingAudios, this.updateNotification(this, t22)));
          let firstPlayerId = null;
          if (dart.test(this.audios[$isNotEmpty])) {
            firstPlayerId = (t22$ = this.players[$first], t22$ == null ? null : t22$.id);
          }
          this.changeNotificationForGroup(this, {isPlaying: isPlaying, firstPlayerId: firstPlayerId, display: this.playingAudios[$isNotEmpty], notificationSettings: this[_notificationSettings], metas: new playable$.Metas.new({title: newNotificationsMetas.title, artist: newNotificationsMetas.subTitle, image: newNotificationsMetas.image})});
        }
      }).bind(this));
    }
    changeNotificationForGroup(playerGroup, opts) {
      let metas = opts && 'metas' in opts ? opts.metas : null;
      let display = opts && 'display' in opts ? opts.display : null;
      let firstPlayerId = opts && 'firstPlayerId' in opts ? opts.firstPlayerId : null;
      let notificationSettings = opts && 'notificationSettings' in opts ? opts.notificationSettings : null;
      let isPlaying = opts && 'isPlaying' in opts ? opts.isPlaying : true;
      return async.async(dart.void, (function* changeNotificationForGroup() {
        if (playerGroup != null) {
          let params = new (T.IdentityMapOfStringL$dynamic()).from(["id", firstPlayerId, "isPlaying", isPlaying, "display", display]);
          playable$.writeAudioMetasInto(params, metas);
          notification.writeNotificationSettingsInto(params, notificationSettings);
          yield this[_sendChannel].invokeMethod(dart.dynamic, "forceNotificationForGroup", params);
        }
      }).bind(this));
    }
    play() {
      return this[_play]();
    }
    [_play](opts) {
      let except = opts && 'except' in opts ? opts.except : null;
      return async.async(dart.void, (function* _play() {
        for (let player of this.players) {
          if (!dart.equals(player, except)) {
            yield player.play();
          }
        }
        this[_isPlaying].value = true;
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    pause() {
      return this[_pause]();
    }
    [_pause](opts) {
      let except = opts && 'except' in opts ? opts.except : null;
      return async.async(dart.void, (function* _pause() {
        for (let player of this.players) {
          if (!dart.equals(player, except)) {
            yield player.pause();
          }
        }
        this[_isPlaying].value = false;
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    stop() {
      return this[_stop]();
    }
    [_stop](opts) {
      let except = opts && 'except' in opts ? opts.except : null;
      return async.async(dart.void, (function* _stop() {
        let copyList = T.ListOfAssetsAudioPlayerL().from(this.players);
        for (let player of copyList) {
          if (!dart.equals(player, except)) {
            yield player.stop();
          }
        }
        this[_isPlaying].value = false;
        yield this[_onPlayersChanged]();
      }).bind(this));
    }
    dispose() {
      this[_subscriptions][$forEach](dart.fn(element => {
        element.cancel();
      }, T.StreamSubscriptionLToNull()));
      this[_subscriptions][$clear]();
      this.players[$forEach](dart.fn(element => {
        element.dispose();
      }, T.AssetsAudioPlayerLToNull()));
      this[_isPlaying].close();
    }
    playOrPause() {
      return async.async(dart.void, (function* playOrPause() {
        if (dart.test(this.isPlaying.value)) {
          yield this.pause();
        } else {
          yield this.play();
        }
      }).bind(this));
    }
  };
  (player_group.AssetsAudioPlayerGroup.new = function(opts) {
    let showNotification = opts && 'showNotification' in opts ? opts.showNotification : false;
    let updateNotification = opts && 'updateNotification' in opts ? opts.updateNotification : null;
    let notificationStopEnabled = opts && 'notificationStopEnabled' in opts ? opts.notificationStopEnabled : true;
    let onNotificationOpened = opts && 'onNotificationOpened' in opts ? opts.onNotificationOpened : null;
    let onNotificationPlay = opts && 'onNotificationPlay' in opts ? opts.onNotificationPlay : null;
    let onNotificationPause = opts && 'onNotificationPause' in opts ? opts.onNotificationPause : null;
    let onNotificationStop = opts && 'onNotificationStop' in opts ? opts.onNotificationStop : null;
    let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : false;
    let playInBackground = opts && 'playInBackground' in opts ? opts.playInBackground : C[136] || CT.C136;
    this[_sendChannel] = C[137] || CT.C137;
    this[_audiosWithPlayers] = new (T.LinkedMapOfAudioL$AssetsAudioPlayerL()).new();
    this[_subscriptions] = T.JSArrayOfStreamSubscriptionL().of([]);
    this[_isPlaying] = T.BehaviorSubjectOfboolL().seeded(false);
    this[__notificationSettings] = null;
    this[showNotification$] = showNotification;
    this[updateNotification$] = updateNotification;
    this[notificationStopEnabled$] = notificationStopEnabled;
    this[onNotificationOpened$] = onNotificationOpened;
    this[onNotificationPlay$] = onNotificationPlay;
    this[onNotificationPause$] = onNotificationPause;
    this[onNotificationStop$] = onNotificationStop;
    this[respectSilentMode$] = respectSilentMode;
    this[playInBackground$] = playInBackground;
    ;
  }).prototype = player_group.AssetsAudioPlayerGroup.prototype;
  dart.addTypeTests(player_group.AssetsAudioPlayerGroup);
  dart.addTypeCaches(player_group.AssetsAudioPlayerGroup);
  dart.setMethodSignature(player_group.AssetsAudioPlayerGroup, () => ({
    __proto__: dart.getMethods(player_group.AssetsAudioPlayerGroup.__proto__),
    add: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Audio)], {loopMode: dart.legacy(loop.LoopMode), playSpeed: dart.legacy(core.double), seek: dart.legacy(core.Duration), volume: dart.legacy(core.double)}, {}),
    addAll: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.List$(dart.legacy(playable$.Audio)))]),
    removeAudio: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Audio)]),
    [_removePlayer]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(assets_audio_player.AssetsAudioPlayer)]),
    [_addPlayer]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Audio), dart.legacy(assets_audio_player.AssetsAudioPlayer)]),
    [_onPlayersChanged]: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    changeNotificationForGroup: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(player_group.AssetsAudioPlayerGroup)], {display: dart.legacy(core.bool), firstPlayerId: dart.legacy(core.String), isPlaying: dart.legacy(core.bool), metas: dart.legacy(playable$.Metas), notificationSettings: dart.legacy(notification.NotificationSettings)}, {}),
    play: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_play]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {except: dart.legacy(assets_audio_player.AssetsAudioPlayer)}, {}),
    pause: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_pause]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {except: dart.legacy(assets_audio_player.AssetsAudioPlayer)}, {}),
    stop: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_stop]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {except: dart.legacy(assets_audio_player.AssetsAudioPlayer)}, {}),
    dispose: dart.fnType(dart.void, []),
    playOrPause: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setGetterSignature(player_group.AssetsAudioPlayerGroup, () => ({
    __proto__: dart.getGetters(player_group.AssetsAudioPlayerGroup.__proto__),
    audiosWithPlayers: dart.legacy(core.Map$(dart.legacy(playable$.Audio), dart.legacy(assets_audio_player.AssetsAudioPlayer))),
    audios: dart.legacy(core.List$(dart.legacy(playable$.Audio))),
    players: dart.legacy(core.List$(dart.legacy(assets_audio_player.AssetsAudioPlayer))),
    isPlaying: dart.legacy(value_stream.ValueStream$(dart.legacy(core.bool))),
    playingAudios: dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio))),
    [_notificationSettings]: dart.legacy(notification.NotificationSettings)
  }));
  dart.setLibraryUri(player_group.AssetsAudioPlayerGroup, I[2]);
  dart.setFieldSignature(player_group.AssetsAudioPlayerGroup, () => ({
    __proto__: dart.getFields(player_group.AssetsAudioPlayerGroup.__proto__),
    [_sendChannel]: dart.finalFieldType(dart.legacy(platform_channel.MethodChannel)),
    showNotification: dart.finalFieldType(dart.legacy(core.bool)),
    respectSilentMode: dart.finalFieldType(dart.legacy(core.bool)),
    notificationStopEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    playInBackground: dart.finalFieldType(dart.legacy(applifecycle.PlayInBackground)),
    updateNotification: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(playable$.PlayerGroupMetas))), [dart.legacy(player_group.AssetsAudioPlayerGroup), dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio)))]))),
    onNotificationOpened: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(player_group.AssetsAudioPlayerGroup), dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio)))]))),
    onNotificationPlay: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(player_group.AssetsAudioPlayerGroup), dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio)))]))),
    onNotificationPause: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(player_group.AssetsAudioPlayerGroup), dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio)))]))),
    onNotificationStop: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(player_group.AssetsAudioPlayerGroup), dart.legacy(core.List$(dart.legacy(playing$.PlayingAudio)))]))),
    [_audiosWithPlayers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(playable$.Audio), dart.legacy(assets_audio_player.AssetsAudioPlayer)))),
    [_subscriptions]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(async.StreamSubscription)))),
    [_isPlaying]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.bool)))),
    [__notificationSettings]: dart.fieldType(dart.legacy(notification.NotificationSettings))
  }));
  dart.defineLazy(player_group, {
    /*player_group._DEFAULT_RESPECT_SILENT_MODE*/get _DEFAULT_RESPECT_SILENT_MODE() {
      return false;
    },
    /*player_group._DEFAULT_SHOW_NOTIFICATION*/get _DEFAULT_SHOW_NOTIFICATION() {
      return false;
    },
    /*player_group._DEFAULT_NOTIFICATION_STOP_ENABLED*/get _DEFAULT_NOTIFICATION_STOP_ENABLED() {
      return true;
    },
    /*player_group._DEFAULT_PLAY_IN_BACKGROUND*/get _DEFAULT_PLAY_IN_BACKGROUND() {
      return C[136] || CT.C136;
    }
  }, true);
  var audio$1 = dart.privateName(playing$, "PlayingAudio.audio");
  var duration$ = dart.privateName(playing$, "PlayingAudio.duration");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  playing$.PlayingAudio = class PlayingAudio extends core.Object {
    get audio() {
      return this[audio$1];
    }
    set audio(value) {
      super.audio = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get assetAudioPath() {
      return this.audio.path;
    }
    toString() {
      return "PlayingAudio{audio: " + dart.str(this.audio) + ", duration: " + dart.str(this.duration) + "}";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.PlayingAudioL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.equals(this.audio, other.audio) && dart.equals(this.duration, other.duration);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.audio)) ^ dart.notNull(dart.hashCode(this.duration))) >>> 0;
    }
  };
  (playing$.PlayingAudio.new = function(opts) {
    let audio = opts && 'audio' in opts ? opts.audio : null;
    let duration = opts && 'duration' in opts ? opts.duration : C[140] || CT.C140;
    this[audio$1] = audio;
    this[duration$] = duration;
    ;
  }).prototype = playing$.PlayingAudio.prototype;
  dart.addTypeTests(playing$.PlayingAudio);
  dart.addTypeCaches(playing$.PlayingAudio);
  dart.setMethodSignature(playing$.PlayingAudio, () => ({
    __proto__: dart.getMethods(playing$.PlayingAudio.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(playing$.PlayingAudio, () => ({
    __proto__: dart.getGetters(playing$.PlayingAudio.__proto__),
    assetAudioPath: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playing$.PlayingAudio, I[3]);
  dart.setFieldSignature(playing$.PlayingAudio, () => ({
    __proto__: dart.getFields(playing$.PlayingAudio.__proto__),
    audio: dart.finalFieldType(dart.legacy(playable$.Audio)),
    duration: dart.finalFieldType(dart.legacy(core.Duration))
  }));
  dart.defineExtensionMethods(playing$.PlayingAudio, ['toString', '_equals']);
  dart.defineExtensionAccessors(playing$.PlayingAudio, ['hashCode']);
  var audios$ = dart.privateName(playing$, "ReadingPlaylist.audios");
  var nextIndex$ = dart.privateName(playing$, "ReadingPlaylist.nextIndex");
  var previousIndex$ = dart.privateName(playing$, "ReadingPlaylist.previousIndex");
  var currentIndex$ = dart.privateName(playing$, "ReadingPlaylist.currentIndex");
  playing$.ReadingPlaylist = class ReadingPlaylist extends core.Object {
    get audios() {
      return this[audios$];
    }
    set audios(value) {
      super.audios = value;
    }
    get nextIndex() {
      return this[nextIndex$];
    }
    set nextIndex(value) {
      super.nextIndex = value;
    }
    get previousIndex() {
      return this[previousIndex$];
    }
    set previousIndex(value) {
      super.previousIndex = value;
    }
    get currentIndex() {
      return this[currentIndex$];
    }
    set currentIndex(value) {
      super.currentIndex = value;
    }
    get current() {
      return this.audios[$_get](this.currentIndex);
    }
    toString() {
      return "ReadingPlaylist{audios: " + dart.str(this.audios) + ", currentIndex: " + dart.str(this.currentIndex) + "}";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.ReadingPlaylistL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.equals(this.audios, other.audios) && this.currentIndex == other.currentIndex;
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.audios)) ^ dart.hashCode(this.currentIndex)) >>> 0;
    }
  };
  (playing$.ReadingPlaylist.new = function(opts) {
    let previousIndex = opts && 'previousIndex' in opts ? opts.previousIndex : null;
    let nextIndex = opts && 'nextIndex' in opts ? opts.nextIndex : null;
    let audios = opts && 'audios' in opts ? opts.audios : null;
    let currentIndex = opts && 'currentIndex' in opts ? opts.currentIndex : 0;
    this[previousIndex$] = previousIndex;
    this[nextIndex$] = nextIndex;
    this[audios$] = audios;
    this[currentIndex$] = currentIndex;
    ;
  }).prototype = playing$.ReadingPlaylist.prototype;
  dart.addTypeTests(playing$.ReadingPlaylist);
  dart.addTypeCaches(playing$.ReadingPlaylist);
  dart.setMethodSignature(playing$.ReadingPlaylist, () => ({
    __proto__: dart.getMethods(playing$.ReadingPlaylist.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(playing$.ReadingPlaylist, () => ({
    __proto__: dart.getGetters(playing$.ReadingPlaylist.__proto__),
    current: dart.legacy(playable$.Audio),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playing$.ReadingPlaylist, I[3]);
  dart.setFieldSignature(playing$.ReadingPlaylist, () => ({
    __proto__: dart.getFields(playing$.ReadingPlaylist.__proto__),
    audios: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(playable$.Audio)))),
    nextIndex: dart.finalFieldType(dart.legacy(core.int)),
    previousIndex: dart.finalFieldType(dart.legacy(core.int)),
    currentIndex: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(playing$.ReadingPlaylist, ['toString', '_equals']);
  dart.defineExtensionAccessors(playing$.ReadingPlaylist, ['hashCode']);
  var audio$2 = dart.privateName(playing$, "Playing.audio");
  var index$ = dart.privateName(playing$, "Playing.index");
  var hasNext$ = dart.privateName(playing$, "Playing.hasNext");
  var playlist$ = dart.privateName(playing$, "Playing.playlist");
  playing$.Playing = class Playing extends core.Object {
    get audio() {
      return this[audio$2];
    }
    set audio(value) {
      super.audio = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get hasNext() {
      return this[hasNext$];
    }
    set hasNext(value) {
      super.hasNext = value;
    }
    get playlist() {
      return this[playlist$];
    }
    set playlist(value) {
      super.playlist = value;
    }
    toString() {
      return "Playing{audio: " + dart.str(this.audio) + ", index: " + dart.str(this.index) + ", hasNext: " + dart.str(this.hasNext) + ", playlist: " + dart.str(this.playlist) + "}";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.PlayingL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.equals(this.audio, other.audio) && this.index == other.index && this.hasNext == other.hasNext && dart.equals(this.playlist, other.playlist);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.audio)) ^ dart.hashCode(this.index) ^ dart.hashCode(this.hasNext) ^ dart.notNull(dart.hashCode(this.playlist))) >>> 0;
    }
  };
  (playing$.Playing.new = function(opts) {
    let audio = opts && 'audio' in opts ? opts.audio : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let hasNext = opts && 'hasNext' in opts ? opts.hasNext : null;
    let playlist = opts && 'playlist' in opts ? opts.playlist : null;
    this[audio$2] = audio;
    this[index$] = index;
    this[hasNext$] = hasNext;
    this[playlist$] = playlist;
    ;
  }).prototype = playing$.Playing.prototype;
  dart.addTypeTests(playing$.Playing);
  dart.addTypeCaches(playing$.Playing);
  dart.setMethodSignature(playing$.Playing, () => ({
    __proto__: dart.getMethods(playing$.Playing.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(playing$.Playing, () => ({
    __proto__: dart.getGetters(playing$.Playing.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playing$.Playing, I[3]);
  dart.setFieldSignature(playing$.Playing, () => ({
    __proto__: dart.getFields(playing$.Playing.__proto__),
    audio: dart.finalFieldType(dart.legacy(playing$.PlayingAudio)),
    index: dart.finalFieldType(dart.legacy(core.int)),
    hasNext: dart.finalFieldType(dart.legacy(core.bool)),
    playlist: dart.finalFieldType(dart.legacy(playing$.ReadingPlaylist))
  }));
  dart.defineExtensionMethods(playing$.Playing, ['toString', '_equals']);
  dart.defineExtensionAccessors(playing$.Playing, ['hashCode']);
  var playerId$ = dart.privateName(playing$, "RealtimePlayingInfos.playerId");
  var current$ = dart.privateName(playing$, "RealtimePlayingInfos.current");
  var duration = dart.privateName(playing$, "RealtimePlayingInfos.duration");
  var currentPosition$ = dart.privateName(playing$, "RealtimePlayingInfos.currentPosition");
  var volume$0 = dart.privateName(playing$, "RealtimePlayingInfos.volume");
  var isPlaying$ = dart.privateName(playing$, "RealtimePlayingInfos.isPlaying");
  var loopMode$0 = dart.privateName(playing$, "RealtimePlayingInfos.loopMode");
  var isBuffering$ = dart.privateName(playing$, "RealtimePlayingInfos.isBuffering");
  var isShuffling$ = dart.privateName(playing$, "RealtimePlayingInfos.isShuffling");
  playing$.RealtimePlayingInfos = class RealtimePlayingInfos extends core.Object {
    get playerId() {
      return this[playerId$];
    }
    set playerId(value) {
      super.playerId = value;
    }
    get current() {
      return this[current$];
    }
    set current(value) {
      super.current = value;
    }
    get duration() {
      return this[duration];
    }
    set duration(value) {
      super.duration = value;
    }
    get currentPosition() {
      return this[currentPosition$];
    }
    set currentPosition(value) {
      super.currentPosition = value;
    }
    get volume() {
      return this[volume$0];
    }
    set volume(value) {
      super.volume = value;
    }
    get isPlaying() {
      return this[isPlaying$];
    }
    set isPlaying(value) {
      super.isPlaying = value;
    }
    get loopMode() {
      return this[loopMode$0];
    }
    set loopMode(value) {
      super.loopMode = value;
    }
    get isBuffering() {
      return this[isBuffering$];
    }
    set isBuffering(value) {
      super.isBuffering = value;
    }
    get isShuffling() {
      return this[isShuffling$];
    }
    set isShuffling(value) {
      super.isShuffling = value;
    }
    get playingPercent() {
      return this.duration.inMilliseconds === 0 ? 0.0 : dart.notNull(this.currentPosition.inMilliseconds) / dart.notNull(this.duration.inMilliseconds);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.RealtimePlayingInfosL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.playerId == other.playerId && dart.equals(this.current, other.current) && dart.equals(this.duration, other.duration) && dart.equals(this.currentPosition, other.currentPosition) && this.volume == other.volume && this.isPlaying == other.isPlaying && this.loopMode == other.loopMode && this.isBuffering == other.isBuffering && this.isShuffling == other.isShuffling;
    }
    get hashCode() {
      return (dart.hashCode(this.playerId) ^ dart.notNull(dart.hashCode(this.current)) ^ dart.notNull(dart.hashCode(this.duration)) ^ dart.notNull(dart.hashCode(this.currentPosition)) ^ dart.hashCode(this.volume) ^ dart.hashCode(this.isPlaying) ^ dart.notNull(dart.hashCode(this.loopMode)) ^ dart.hashCode(this.isBuffering) ^ dart.hashCode(this.isShuffling)) >>> 0;
    }
    toString() {
      return "RealtimePlayingInfos{playerId: " + dart.str(this.playerId) + ", current: " + dart.str(this.current) + ", duration: " + dart.str(this.duration) + ", currentPosition: " + dart.str(this.currentPosition) + ", volume: " + dart.str(this.volume) + ", isPlaying: " + dart.str(this.isPlaying) + ", loopMode: " + dart.str(this.loopMode) + ", isBuffering: " + dart.str(this.isBuffering) + ", isShuffling: " + dart.str(this.isShuffling) + "}";
    }
  };
  (playing$.RealtimePlayingInfos.new = function(opts) {
    let t22, t22$, t22$0;
    let playerId = opts && 'playerId' in opts ? opts.playerId : null;
    let current = opts && 'current' in opts ? opts.current : null;
    let currentPosition = opts && 'currentPosition' in opts ? opts.currentPosition : null;
    let volume = opts && 'volume' in opts ? opts.volume : null;
    let isPlaying = opts && 'isPlaying' in opts ? opts.isPlaying : null;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : null;
    let isBuffering = opts && 'isBuffering' in opts ? opts.isBuffering : null;
    let isShuffling = opts && 'isShuffling' in opts ? opts.isShuffling : null;
    this[playerId$] = playerId;
    this[current$] = current;
    this[currentPosition$] = currentPosition;
    this[volume$0] = volume;
    this[isPlaying$] = isPlaying;
    this[loopMode$0] = loopMode;
    this[isBuffering$] = isBuffering;
    this[isShuffling$] = isShuffling;
    this[duration] = (t22$0 = (t22$ = (t22 = current, t22 == null ? null : t22.audio), t22$ == null ? null : t22$.duration), t22$0 == null ? new core.Duration.new() : t22$0);
    ;
  }).prototype = playing$.RealtimePlayingInfos.prototype;
  dart.addTypeTests(playing$.RealtimePlayingInfos);
  dart.addTypeCaches(playing$.RealtimePlayingInfos);
  dart.setMethodSignature(playing$.RealtimePlayingInfos, () => ({
    __proto__: dart.getMethods(playing$.RealtimePlayingInfos.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(playing$.RealtimePlayingInfos, () => ({
    __proto__: dart.getGetters(playing$.RealtimePlayingInfos.__proto__),
    playingPercent: dart.legacy(core.double),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playing$.RealtimePlayingInfos, I[3]);
  dart.setFieldSignature(playing$.RealtimePlayingInfos, () => ({
    __proto__: dart.getFields(playing$.RealtimePlayingInfos.__proto__),
    playerId: dart.finalFieldType(dart.legacy(core.String)),
    current: dart.finalFieldType(dart.legacy(playing$.Playing)),
    duration: dart.finalFieldType(dart.legacy(core.Duration)),
    currentPosition: dart.finalFieldType(dart.legacy(core.Duration)),
    volume: dart.finalFieldType(dart.legacy(core.double)),
    isPlaying: dart.finalFieldType(dart.legacy(core.bool)),
    loopMode: dart.finalFieldType(dart.legacy(loop.LoopMode)),
    isBuffering: dart.finalFieldType(dart.legacy(core.bool)),
    isShuffling: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(playing$.RealtimePlayingInfos, ['_equals', 'toString']);
  dart.defineExtensionAccessors(playing$.RealtimePlayingInfos, ['hashCode']);
  var _currentlyOpenedIn = dart.privateName(playable$, "_currentlyOpenedIn");
  playable$.Playable = class Playable extends core.Object {
    get currentlyOpenedIn() {
      return T.LinkedHashSetOfPlayerEditorL().from(this[_currentlyOpenedIn]);
    }
    setCurrentlyOpenedIn(player) {
      this[_currentlyOpenedIn].add(player);
    }
    removeCurrentlyOpenedIn(player) {
      this[_currentlyOpenedIn].remove(player);
    }
  };
  (playable$.Playable.new = function() {
    this[_currentlyOpenedIn] = new (T._HashSetOfPlayerEditorL()).new();
    ;
  }).prototype = playable$.Playable.prototype;
  dart.addTypeTests(playable$.Playable);
  dart.addTypeCaches(playable$.Playable);
  dart.setMethodSignature(playable$.Playable, () => ({
    __proto__: dart.getMethods(playable$.Playable.__proto__),
    setCurrentlyOpenedIn: dart.fnType(dart.void, [dart.legacy(assets_audio_player.PlayerEditor)]),
    removeCurrentlyOpenedIn: dart.fnType(dart.void, [dart.legacy(assets_audio_player.PlayerEditor)])
  }));
  dart.setGetterSignature(playable$.Playable, () => ({
    __proto__: dart.getGetters(playable$.Playable.__proto__),
    currentlyOpenedIn: dart.legacy(core.Set$(dart.legacy(assets_audio_player.PlayerEditor)))
  }));
  dart.setLibraryUri(playable$.Playable, I[4]);
  dart.setFieldSignature(playable$.Playable, () => ({
    __proto__: dart.getFields(playable$.Playable.__proto__),
    [_currentlyOpenedIn]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(assets_audio_player.PlayerEditor))))
  }));
  var _name$1 = dart.privateName(playable$, "_name");
  playable$.AudioType = class AudioType extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (playable$.AudioType.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = playable$.AudioType.prototype;
  dart.addTypeTests(playable$.AudioType);
  dart.addTypeCaches(playable$.AudioType);
  dart.setMethodSignature(playable$.AudioType, () => ({
    __proto__: dart.getMethods(playable$.AudioType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(playable$.AudioType, I[4]);
  dart.setFieldSignature(playable$.AudioType, () => ({
    __proto__: dart.getFields(playable$.AudioType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(playable$.AudioType, ['toString']);
  playable$.AudioType.network = C[141] || CT.C141;
  playable$.AudioType.liveStream = C[142] || CT.C142;
  playable$.AudioType.file = C[143] || CT.C143;
  playable$.AudioType.asset = C[144] || CT.C144;
  playable$.AudioType.values = C[145] || CT.C145;
  playable$.ImageType = class ImageType extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (playable$.ImageType.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = playable$.ImageType.prototype;
  dart.addTypeTests(playable$.ImageType);
  dart.addTypeCaches(playable$.ImageType);
  dart.setMethodSignature(playable$.ImageType, () => ({
    __proto__: dart.getMethods(playable$.ImageType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(playable$.ImageType, I[4]);
  dart.setFieldSignature(playable$.ImageType, () => ({
    __proto__: dart.getFields(playable$.ImageType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(playable$.ImageType, ['toString']);
  playable$.ImageType.network = C[146] || CT.C146;
  playable$.ImageType.file = C[147] || CT.C147;
  playable$.ImageType.asset = C[148] || CT.C148;
  playable$.ImageType.values = C[149] || CT.C149;
  var path$ = dart.privateName(playable$, "MetasImage.path");
  var $package$ = dart.privateName(playable$, "MetasImage.package");
  var type = dart.privateName(playable$, "MetasImage.type");
  playable$.MetasImage = class MetasImage extends core.Object {
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    get type() {
      return this[type];
    }
    set type(value) {
      super.type = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.MetasImageL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.path == other.path && this.package == other.package && this.type == other.type;
    }
    get hashCode() {
      return (dart.hashCode(this.path) ^ dart.hashCode(this.package) ^ dart.notNull(dart.hashCode(this.type))) >>> 0;
    }
  };
  (playable$.MetasImage.network = function(path) {
    this[path$] = path;
    this[type] = playable$.ImageType.network;
    this[$package$] = null;
    ;
  }).prototype = playable$.MetasImage.prototype;
  (playable$.MetasImage.asset = function(path, opts) {
    let $package = opts && 'package' in opts ? opts.package : null;
    this[path$] = path;
    this[$package$] = $package;
    this[type] = playable$.ImageType.asset;
    ;
  }).prototype = playable$.MetasImage.prototype;
  (playable$.MetasImage.file = function(path) {
    this[path$] = path;
    this[type] = playable$.ImageType.file;
    this[$package$] = null;
    ;
  }).prototype = playable$.MetasImage.prototype;
  dart.addTypeTests(playable$.MetasImage);
  dart.addTypeCaches(playable$.MetasImage);
  dart.setMethodSignature(playable$.MetasImage, () => ({
    __proto__: dart.getMethods(playable$.MetasImage.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(playable$.MetasImage, () => ({
    __proto__: dart.getGetters(playable$.MetasImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playable$.MetasImage, I[4]);
  dart.setFieldSignature(playable$.MetasImage, () => ({
    __proto__: dart.getFields(playable$.MetasImage.__proto__),
    path: dart.finalFieldType(dart.legacy(core.String)),
    package: dart.finalFieldType(dart.legacy(core.String)),
    type: dart.finalFieldType(dart.legacy(playable$.ImageType))
  }));
  dart.defineExtensionMethods(playable$.MetasImage, ['_equals']);
  dart.defineExtensionAccessors(playable$.MetasImage, ['hashCode']);
  var id$ = dart.privateName(playable$, "Metas.id");
  var title$ = dart.privateName(playable$, "Metas.title");
  var artist$ = dart.privateName(playable$, "Metas.artist");
  var album$ = dart.privateName(playable$, "Metas.album");
  var extra$ = dart.privateName(playable$, "Metas.extra");
  var image$ = dart.privateName(playable$, "Metas.image");
  var onImageLoadFail$ = dart.privateName(playable$, "Metas.onImageLoadFail");
  playable$.Metas = class Metas extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get artist() {
      return this[artist$];
    }
    set artist(value) {
      super.artist = value;
    }
    get album() {
      return this[album$];
    }
    set album(value) {
      super.album = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      super.extra = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get onImageLoadFail() {
      return this[onImageLoadFail$];
    }
    set onImageLoadFail(value) {
      super.onImageLoadFail = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.MetasL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.title == other.title && this.artist == other.artist && this.album == other.album && dart.equals(this.image, other.image) && dart.equals(this.onImageLoadFail, this.onImageLoadFail);
    }
    get hashCode() {
      return (dart.hashCode(this.title) ^ dart.hashCode(this.artist) ^ dart.hashCode(this.album) ^ dart.notNull(dart.hashCode(this.image)) ^ dart.notNull(dart.hashCode(this.onImageLoadFail))) >>> 0;
    }
    copyWith(opts) {
      let t22, t22$, t22$0, t22$1, t22$2, t22$3, t22$4;
      let id = opts && 'id' in opts ? opts.id : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let artist = opts && 'artist' in opts ? opts.artist : null;
      let album = opts && 'album' in opts ? opts.album : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let image = opts && 'image' in opts ? opts.image : null;
      let onImageLoadFail = opts && 'onImageLoadFail' in opts ? opts.onImageLoadFail : null;
      return new playable$.Metas.new({id: (t22 = id, t22 == null ? this.id : t22), title: (t22$ = title, t22$ == null ? this.title : t22$), artist: (t22$0 = artist, t22$0 == null ? this.artist : t22$0), album: (t22$1 = album, t22$1 == null ? this.album : t22$1), extra: (t22$2 = extra, t22$2 == null ? this.extra : t22$2), image: (t22$3 = image, t22$3 == null ? this.image : t22$3), onImageLoadFail: (t22$4 = onImageLoadFail, t22$4 == null ? this.onImageLoadFail : t22$4)});
    }
  };
  (playable$.Metas.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let artist = opts && 'artist' in opts ? opts.artist : null;
    let album = opts && 'album' in opts ? opts.album : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let onImageLoadFail = opts && 'onImageLoadFail' in opts ? opts.onImageLoadFail : null;
    this[id$] = id;
    this[title$] = title;
    this[artist$] = artist;
    this[album$] = album;
    this[image$] = image;
    this[extra$] = extra;
    this[onImageLoadFail$] = onImageLoadFail;
    if (this.id == null) {
      this.id = new uuid.Uuid.new().v4();
    }
  }).prototype = playable$.Metas.prototype;
  dart.addTypeTests(playable$.Metas);
  dart.addTypeCaches(playable$.Metas);
  dart.setMethodSignature(playable$.Metas, () => ({
    __proto__: dart.getMethods(playable$.Metas.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    copyWith: dart.fnType(dart.legacy(playable$.Metas), [], {album: dart.legacy(core.String), artist: dart.legacy(core.String), extra: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), id: dart.legacy(core.String), image: dart.legacy(playable$.MetasImage), onImageLoadFail: dart.legacy(playable$.MetasImage), title: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(playable$.Metas, () => ({
    __proto__: dart.getGetters(playable$.Metas.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playable$.Metas, I[4]);
  dart.setFieldSignature(playable$.Metas, () => ({
    __proto__: dart.getFields(playable$.Metas.__proto__),
    id: dart.fieldType(dart.legacy(core.String)),
    title: dart.finalFieldType(dart.legacy(core.String)),
    artist: dart.finalFieldType(dart.legacy(core.String)),
    album: dart.finalFieldType(dart.legacy(core.String)),
    extra: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    image: dart.finalFieldType(dart.legacy(playable$.MetasImage)),
    onImageLoadFail: dart.finalFieldType(dart.legacy(playable$.MetasImage))
  }));
  dart.defineExtensionMethods(playable$.Metas, ['_equals']);
  dart.defineExtensionAccessors(playable$.Metas, ['hashCode']);
  var path$0 = dart.privateName(playable$, "Audio.path");
  var $package$0 = dart.privateName(playable$, "Audio.package");
  var audioType$ = dart.privateName(playable$, "Audio.audioType");
  var _metas = dart.privateName(playable$, "_metas");
  var _networkHeaders = dart.privateName(playable$, "_networkHeaders");
  playable$.Audio = class Audio extends playable$.Playable {
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get package() {
      return this[$package$0];
    }
    set package(value) {
      super.package = value;
    }
    get audioType() {
      return this[audioType$];
    }
    set audioType(value) {
      super.audioType = value;
    }
    get metas() {
      return this[_metas];
    }
    get networkHeaders() {
      return this[_networkHeaders];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.AudioL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.path == other.path && this.package == other.package && this.audioType == other.audioType && dart.equals(this.metas, other.metas);
    }
    get hashCode() {
      return (dart.hashCode(this.path) ^ dart.hashCode(this.package) ^ dart.notNull(dart.hashCode(this.audioType)) ^ dart.notNull(dart.hashCode(this.metas))) >>> 0;
    }
    toString() {
      return "Audio{path: " + dart.str(this.path) + ", package: " + dart.str(this.package) + ", audioType: " + dart.str(this.audioType) + ", _metas: " + dart.str(this[_metas]) + ", _networkHeaders: " + dart.str(this[_networkHeaders]) + "}";
    }
    updateMetas(opts) {
      let t22;
      let title = opts && 'title' in opts ? opts.title : null;
      let artist = opts && 'artist' in opts ? opts.artist : null;
      let album = opts && 'album' in opts ? opts.album : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let image = opts && 'image' in opts ? opts.image : null;
      this[_metas] = (t22 = this[_metas], t22 == null ? new playable$.Metas.new() : t22).copyWith({title: title, artist: artist, album: album, extra: extra, image: image});
      super.currentlyOpenedIn[$forEach](dart.fn(playerEditor => {
        playerEditor.onAudioMetasUpdated(this);
      }, T.PlayerEditorLToNull()));
    }
    copyWith(opts) {
      let t22, t22$, t22$0, t22$1, t22$2;
      let path = opts && 'path' in opts ? opts.path : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let audioType = opts && 'audioType' in opts ? opts.audioType : null;
      let metas = opts && 'metas' in opts ? opts.metas : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new playable$.Audio.__({path: (t22 = path, t22 == null ? this.path : t22), package: (t22$ = $package, t22$ == null ? this.package : t22$), audioType: (t22$0 = audioType, t22$0 == null ? this.audioType : t22$0), metas: (t22$1 = metas, t22$1 == null ? this[_metas] : t22$1), headers: (t22$2 = headers, t22$2 == null ? this[_networkHeaders] : t22$2)});
    }
  };
  (playable$.Audio.__ = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let audioType = opts && 'audioType' in opts ? opts.audioType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let metas = opts && 'metas' in opts ? opts.metas : null;
    this[path$0] = path;
    this[$package$0] = $package;
    this[audioType$] = audioType;
    this[_metas] = metas;
    this[_networkHeaders] = headers;
    playable$.Audio.__proto__.new.call(this);
    ;
  }).prototype = playable$.Audio.prototype;
  (playable$.Audio.new = function(path, opts) {
    let metas = opts && 'metas' in opts ? opts.metas : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[path$0] = path;
    this[$package$0] = $package;
    this[audioType$] = playable$.AudioType.asset;
    this[_networkHeaders] = null;
    this[_metas] = metas;
    playable$.Audio.__proto__.new.call(this);
    ;
  }).prototype = playable$.Audio.prototype;
  (playable$.Audio.file = function(path, opts) {
    let metas = opts && 'metas' in opts ? opts.metas : null;
    this[path$0] = path;
    this[audioType$] = playable$.AudioType.file;
    this[$package$0] = null;
    this[_networkHeaders] = null;
    this[_metas] = metas;
    playable$.Audio.__proto__.new.call(this);
    ;
  }).prototype = playable$.Audio.prototype;
  (playable$.Audio.network = function(path, opts) {
    let metas = opts && 'metas' in opts ? opts.metas : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[path$0] = path;
    this[audioType$] = playable$.AudioType.network;
    this[$package$0] = null;
    this[_networkHeaders] = headers;
    this[_metas] = metas;
    playable$.Audio.__proto__.new.call(this);
    ;
  }).prototype = playable$.Audio.prototype;
  (playable$.Audio.liveStream = function(path, opts) {
    let metas = opts && 'metas' in opts ? opts.metas : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[path$0] = path;
    this[audioType$] = playable$.AudioType.liveStream;
    this[$package$0] = null;
    this[_networkHeaders] = headers;
    this[_metas] = metas;
    playable$.Audio.__proto__.new.call(this);
    ;
  }).prototype = playable$.Audio.prototype;
  dart.addTypeTests(playable$.Audio);
  dart.addTypeCaches(playable$.Audio);
  dart.setMethodSignature(playable$.Audio, () => ({
    __proto__: dart.getMethods(playable$.Audio.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    updateMetas: dart.fnType(dart.void, [], {album: dart.legacy(core.String), artist: dart.legacy(core.String), extra: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), image: dart.legacy(playable$.MetasImage), title: dart.legacy(core.String)}, {}),
    copyWith: dart.fnType(dart.legacy(playable$.Audio), [], {audioType: dart.legacy(playable$.AudioType), headers: dart.legacy(core.Map), metas: dart.legacy(playable$.Metas), package: dart.legacy(core.String), path: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(playable$.Audio, () => ({
    __proto__: dart.getGetters(playable$.Audio.__proto__),
    metas: dart.legacy(playable$.Metas),
    networkHeaders: dart.legacy(core.Map),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playable$.Audio, I[4]);
  dart.setFieldSignature(playable$.Audio, () => ({
    __proto__: dart.getFields(playable$.Audio.__proto__),
    path: dart.finalFieldType(dart.legacy(core.String)),
    package: dart.finalFieldType(dart.legacy(core.String)),
    audioType: dart.finalFieldType(dart.legacy(playable$.AudioType)),
    [_metas]: dart.fieldType(dart.legacy(playable$.Metas)),
    [_networkHeaders]: dart.fieldType(dart.legacy(core.Map))
  }));
  dart.defineExtensionMethods(playable$.Audio, ['_equals', 'toString']);
  dart.defineExtensionAccessors(playable$.Audio, ['hashCode']);
  var audios$0 = dart.privateName(playable$, "Playlist.audios");
  var _startIndex = dart.privateName(playable$, "_startIndex");
  playable$.Playlist = class Playlist extends playable$.Playable {
    get audios() {
      return this[audios$0];
    }
    set audios(value) {
      super.audios = value;
    }
    get startIndex() {
      return this[_startIndex];
    }
    set startIndex(newValue) {
      if (dart.notNull(newValue) < dart.notNull(this.audios[$length])) {
        this[_startIndex] = newValue;
      }
    }
    get numberOfItems() {
      return this.audios[$length];
    }
    add(audio) {
      if (audio != null) {
        this.audios[$add](audio);
      }
      return this;
    }
    insert(index, audio) {
      if (audio != null) {
        this.audios[$insert](index, audio);
      }
      super.currentlyOpenedIn[$forEach](dart.fn(playerEditor => {
        playerEditor.onAudioAddedAt(index);
      }, T.PlayerEditorLToNull()));
      return this;
    }
    replaceAt(index, replacer, opts) {
      let keepPlayingPositionIfCurrent = opts && 'keepPlayingPositionIfCurrent' in opts ? opts.keepPlayingPositionIfCurrent : null;
      if (dart.notNull(index) < dart.notNull(this.audios[$length]) && replacer != null) {
        let oldElement = this.audios[$elementAt](index);
        let newElement = replacer(oldElement);
        this.audios[$_set](index, newElement);
        super.currentlyOpenedIn[$forEach](dart.fn(playerEditor => {
          playerEditor.onAudioReplacedAt(index, keepPlayingPositionIfCurrent);
        }, T.PlayerEditorLToNull()));
      }
      return this;
    }
    addAll(audios) {
      if (audios != null) {
        this.audios[$addAll](audios);
      }
      return this;
    }
    remove(audio) {
      if (audio == null) return false;
      let index = this.audios[$indexOf](audio);
      let removed = this.audios[$remove](audio);
      super.currentlyOpenedIn[$forEach](dart.fn(playerEditor => {
        playerEditor.onAudioRemovedAt(index);
      }, T.PlayerEditorLToNull()));
      return removed;
    }
    removeAtIndex(index) {
      let removedAudio = this.audios[$removeAt](index);
      super.currentlyOpenedIn[$forEach](dart.fn(playerEditor => {
        playerEditor.onAudioRemovedAt(index);
      }, T.PlayerEditorLToNull()));
      return removedAudio;
    }
    contains(audio) {
      return this.audios[$contains](audio);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.PlaylistL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.equals(this.audios, other.audios) && this.startIndex == other.startIndex;
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.audios)) ^ dart.hashCode(this.startIndex)) >>> 0;
    }
  };
  (playable$.Playlist.new = function(opts) {
    let audios = opts && 'audios' in opts ? opts.audios : null;
    let startIndex = opts && 'startIndex' in opts ? opts.startIndex : 0;
    this[audios$0] = T.JSArrayOfAudioL().of([]);
    this[_startIndex] = 0;
    playable$.Playlist.__proto__.new.call(this);
    if (audios != null) {
      this.audios[$addAll](audios);
    }
    this.startIndex = startIndex;
  }).prototype = playable$.Playlist.prototype;
  dart.addTypeTests(playable$.Playlist);
  dart.addTypeCaches(playable$.Playlist);
  dart.setMethodSignature(playable$.Playlist, () => ({
    __proto__: dart.getMethods(playable$.Playlist.__proto__),
    add: dart.fnType(dart.legacy(playable$.Playlist), [dart.legacy(playable$.Audio)]),
    insert: dart.fnType(dart.legacy(playable$.Playlist), [dart.legacy(core.int), dart.legacy(playable$.Audio)]),
    replaceAt: dart.fnType(dart.legacy(playable$.Playlist), [dart.legacy(core.int), dart.legacy(dart.fnType(dart.legacy(playable$.Audio), [dart.legacy(playable$.Audio)]))], {keepPlayingPositionIfCurrent: dart.legacy(core.bool)}, {}),
    addAll: dart.fnType(dart.legacy(playable$.Playlist), [dart.legacy(core.List$(dart.legacy(playable$.Audio)))]),
    remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(playable$.Audio)]),
    removeAtIndex: dart.fnType(dart.legacy(playable$.Audio), [dart.legacy(core.int)]),
    contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(playable$.Audio)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(playable$.Playlist, () => ({
    __proto__: dart.getGetters(playable$.Playlist.__proto__),
    startIndex: dart.legacy(core.int),
    numberOfItems: dart.legacy(core.int),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setSetterSignature(playable$.Playlist, () => ({
    __proto__: dart.getSetters(playable$.Playlist.__proto__),
    startIndex: dart.legacy(core.int)
  }));
  dart.setLibraryUri(playable$.Playlist, I[4]);
  dart.setFieldSignature(playable$.Playlist, () => ({
    __proto__: dart.getFields(playable$.Playlist.__proto__),
    audios: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(playable$.Audio)))),
    [_startIndex]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(playable$.Playlist, ['_equals']);
  dart.defineExtensionAccessors(playable$.Playlist, ['hashCode']);
  var title$0 = dart.privateName(playable$, "PlayerGroupMetas.title");
  var subTitle$ = dart.privateName(playable$, "PlayerGroupMetas.subTitle");
  var image$0 = dart.privateName(playable$, "PlayerGroupMetas.image");
  playable$.PlayerGroupMetas = class PlayerGroupMetas extends core.Object {
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get subTitle() {
      return this[subTitle$];
    }
    set subTitle(value) {
      super.subTitle = value;
    }
    get image() {
      return this[image$0];
    }
    set image(value) {
      super.image = value;
    }
  };
  (playable$.PlayerGroupMetas.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let subTitle = opts && 'subTitle' in opts ? opts.subTitle : null;
    let image = opts && 'image' in opts ? opts.image : null;
    this[title$0] = title;
    this[subTitle$] = subTitle;
    this[image$0] = image;
    ;
  }).prototype = playable$.PlayerGroupMetas.prototype;
  dart.addTypeTests(playable$.PlayerGroupMetas);
  dart.addTypeCaches(playable$.PlayerGroupMetas);
  dart.setLibraryUri(playable$.PlayerGroupMetas, I[4]);
  dart.setFieldSignature(playable$.PlayerGroupMetas, () => ({
    __proto__: dart.getFields(playable$.PlayerGroupMetas.__proto__),
    title: dart.finalFieldType(dart.legacy(core.String)),
    subTitle: dart.finalFieldType(dart.legacy(core.String)),
    image: dart.finalFieldType(dart.legacy(playable$.MetasImage))
  }));
  playable$.audioTypeDescription = function audioTypeDescription(audioType) {
    switch (audioType) {
      case C[141] || CT.C141:
      {
        return "network";
      }
      case C[142] || CT.C142:
      {
        return "liveStream";
      }
      case C[143] || CT.C143:
      {
        return "file";
      }
      case C[144] || CT.C144:
      {
        return "asset";
      }
    }
    return null;
  };
  playable$.imageTypeDescription = function imageTypeDescription(imageType) {
    switch (imageType) {
      case C[146] || CT.C146:
      {
        return "network";
      }
      case C[147] || CT.C147:
      {
        return "file";
      }
      case C[148] || CT.C148:
      {
        return "asset";
      }
    }
    return null;
  };
  playable$.writeAudioMetasInto = function writeAudioMetasInto(params, metas) {
    if (metas != null) {
      if (metas.title != null) params[$_set]("song.title", metas.title);
      if (metas.artist != null) params[$_set]("song.artist", metas.artist);
      if (metas.album != null) params[$_set]("song.album", metas.album);
      playable$.writeAudioImageMetasInto(params, metas.image);
      playable$.writeAudioImageMetasInto(params, metas.onImageLoadFail, {suffix: ".onLoadFail"});
      if (metas.id != null) {
        params[$_set]("song.trackID", metas.id);
      }
    }
  };
  playable$.writeAudioImageMetasInto = function writeAudioImageMetasInto(params, metasImage, opts) {
    let suffix = opts && 'suffix' in opts ? opts.suffix : "";
    if (metasImage != null) {
      params[$_set]("song.image" + dart.str(suffix), metasImage.path);
      params[$_set]("song.imageType" + dart.str(suffix), playable$.imageTypeDescription(metasImage.type));
      utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "song.imagePackage" + dart.str(suffix), metasImage.package);
    }
  };
  var name$ = dart.privateName(notification, "AndroidResDrawable.name");
  notification.AndroidResDrawable = class AndroidResDrawable extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
  };
  (notification.AndroidResDrawable.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[name$] = name;
    ;
  }).prototype = notification.AndroidResDrawable.prototype;
  dart.addTypeTests(notification.AndroidResDrawable);
  dart.addTypeCaches(notification.AndroidResDrawable);
  dart.setLibraryUri(notification.AndroidResDrawable, I[5]);
  dart.setFieldSignature(notification.AndroidResDrawable, () => ({
    __proto__: dart.getFields(notification.AndroidResDrawable.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String))
  }));
  var nextEnabled$ = dart.privateName(notification, "NotificationSettings.nextEnabled");
  var playPauseEnabled$ = dart.privateName(notification, "NotificationSettings.playPauseEnabled");
  var prevEnabled$ = dart.privateName(notification, "NotificationSettings.prevEnabled");
  var seekBarEnabled$ = dart.privateName(notification, "NotificationSettings.seekBarEnabled");
  var stopEnabled$ = dart.privateName(notification, "NotificationSettings.stopEnabled");
  var customNextAction$ = dart.privateName(notification, "NotificationSettings.customNextAction");
  var customPlayPauseAction$ = dart.privateName(notification, "NotificationSettings.customPlayPauseAction");
  var customPrevAction$ = dart.privateName(notification, "NotificationSettings.customPrevAction");
  var customStopAction$ = dart.privateName(notification, "NotificationSettings.customStopAction");
  var customNextIcon$ = dart.privateName(notification, "NotificationSettings.customNextIcon");
  var customPreviousIcon$ = dart.privateName(notification, "NotificationSettings.customPreviousIcon");
  var customPlayIcon$ = dart.privateName(notification, "NotificationSettings.customPlayIcon");
  var customPauseIcon$ = dart.privateName(notification, "NotificationSettings.customPauseIcon");
  var customStopIcon$ = dart.privateName(notification, "NotificationSettings.customStopIcon");
  notification.NotificationSettings = class NotificationSettings extends core.Object {
    get nextEnabled() {
      return this[nextEnabled$];
    }
    set nextEnabled(value) {
      super.nextEnabled = value;
    }
    get playPauseEnabled() {
      return this[playPauseEnabled$];
    }
    set playPauseEnabled(value) {
      super.playPauseEnabled = value;
    }
    get prevEnabled() {
      return this[prevEnabled$];
    }
    set prevEnabled(value) {
      super.prevEnabled = value;
    }
    get seekBarEnabled() {
      return this[seekBarEnabled$];
    }
    set seekBarEnabled(value) {
      super.seekBarEnabled = value;
    }
    get stopEnabled() {
      return this[stopEnabled$];
    }
    set stopEnabled(value) {
      super.stopEnabled = value;
    }
    get customNextAction() {
      return this[customNextAction$];
    }
    set customNextAction(value) {
      super.customNextAction = value;
    }
    get customPlayPauseAction() {
      return this[customPlayPauseAction$];
    }
    set customPlayPauseAction(value) {
      super.customPlayPauseAction = value;
    }
    get customPrevAction() {
      return this[customPrevAction$];
    }
    set customPrevAction(value) {
      super.customPrevAction = value;
    }
    get customStopAction() {
      return this[customStopAction$];
    }
    set customStopAction(value) {
      super.customStopAction = value;
    }
    get customNextIcon() {
      return this[customNextIcon$];
    }
    set customNextIcon(value) {
      super.customNextIcon = value;
    }
    get customPreviousIcon() {
      return this[customPreviousIcon$];
    }
    set customPreviousIcon(value) {
      super.customPreviousIcon = value;
    }
    get customPlayIcon() {
      return this[customPlayIcon$];
    }
    set customPlayIcon(value) {
      super.customPlayIcon = value;
    }
    get customPauseIcon() {
      return this[customPauseIcon$];
    }
    set customPauseIcon(value) {
      super.customPauseIcon = value;
    }
    get customStopIcon() {
      return this[customStopIcon$];
    }
    set customStopIcon(value) {
      super.customStopIcon = value;
    }
  };
  (notification.NotificationSettings.new = function(opts) {
    let playPauseEnabled = opts && 'playPauseEnabled' in opts ? opts.playPauseEnabled : true;
    let nextEnabled = opts && 'nextEnabled' in opts ? opts.nextEnabled : true;
    let prevEnabled = opts && 'prevEnabled' in opts ? opts.prevEnabled : true;
    let stopEnabled = opts && 'stopEnabled' in opts ? opts.stopEnabled : true;
    let seekBarEnabled = opts && 'seekBarEnabled' in opts ? opts.seekBarEnabled : true;
    let customNextAction = opts && 'customNextAction' in opts ? opts.customNextAction : null;
    let customPlayPauseAction = opts && 'customPlayPauseAction' in opts ? opts.customPlayPauseAction : null;
    let customPrevAction = opts && 'customPrevAction' in opts ? opts.customPrevAction : null;
    let customStopAction = opts && 'customStopAction' in opts ? opts.customStopAction : null;
    let customNextIcon = opts && 'customNextIcon' in opts ? opts.customNextIcon : null;
    let customPauseIcon = opts && 'customPauseIcon' in opts ? opts.customPauseIcon : null;
    let customPlayIcon = opts && 'customPlayIcon' in opts ? opts.customPlayIcon : null;
    let customPreviousIcon = opts && 'customPreviousIcon' in opts ? opts.customPreviousIcon : null;
    let customStopIcon = opts && 'customStopIcon' in opts ? opts.customStopIcon : null;
    this[playPauseEnabled$] = playPauseEnabled;
    this[nextEnabled$] = nextEnabled;
    this[prevEnabled$] = prevEnabled;
    this[stopEnabled$] = stopEnabled;
    this[seekBarEnabled$] = seekBarEnabled;
    this[customNextAction$] = customNextAction;
    this[customPlayPauseAction$] = customPlayPauseAction;
    this[customPrevAction$] = customPrevAction;
    this[customStopAction$] = customStopAction;
    this[customNextIcon$] = customNextIcon;
    this[customPauseIcon$] = customPauseIcon;
    this[customPlayIcon$] = customPlayIcon;
    this[customPreviousIcon$] = customPreviousIcon;
    this[customStopIcon$] = customStopIcon;
    ;
  }).prototype = notification.NotificationSettings.prototype;
  dart.addTypeTests(notification.NotificationSettings);
  dart.addTypeCaches(notification.NotificationSettings);
  dart.setLibraryUri(notification.NotificationSettings, I[5]);
  dart.setFieldSignature(notification.NotificationSettings, () => ({
    __proto__: dart.getFields(notification.NotificationSettings.__proto__),
    nextEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    playPauseEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    prevEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    seekBarEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    stopEnabled: dart.finalFieldType(dart.legacy(core.bool)),
    customNextAction: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(assets_audio_player.AssetsAudioPlayer)]))),
    customPlayPauseAction: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(assets_audio_player.AssetsAudioPlayer)]))),
    customPrevAction: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(assets_audio_player.AssetsAudioPlayer)]))),
    customStopAction: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(assets_audio_player.AssetsAudioPlayer)]))),
    customNextIcon: dart.finalFieldType(dart.legacy(notification.AndroidResDrawable)),
    customPreviousIcon: dart.finalFieldType(dart.legacy(notification.AndroidResDrawable)),
    customPlayIcon: dart.finalFieldType(dart.legacy(notification.AndroidResDrawable)),
    customPauseIcon: dart.finalFieldType(dart.legacy(notification.AndroidResDrawable)),
    customStopIcon: dart.finalFieldType(dart.legacy(notification.AndroidResDrawable))
  }));
  var audioId$ = dart.privateName(notification, "ClickedNotification.audioId");
  notification.ClickedNotification = class ClickedNotification extends core.Object {
    get audioId() {
      return this[audioId$];
    }
    set audioId(value) {
      super.audioId = value;
    }
  };
  (notification.ClickedNotification.new = function(opts) {
    let audioId = opts && 'audioId' in opts ? opts.audioId : null;
    this[audioId$] = audioId;
    ;
  }).prototype = notification.ClickedNotification.prototype;
  dart.addTypeTests(notification.ClickedNotification);
  dart.addTypeCaches(notification.ClickedNotification);
  dart.setLibraryUri(notification.ClickedNotification, I[5]);
  dart.setFieldSignature(notification.ClickedNotification, () => ({
    __proto__: dart.getFields(notification.ClickedNotification.__proto__),
    audioId: dart.finalFieldType(dart.legacy(core.String))
  }));
  var clickedNotification$ = dart.privateName(notification, "ClickedNotificationWrapper.clickedNotification");
  var handled = dart.privateName(notification, "ClickedNotificationWrapper.handled");
  notification.ClickedNotificationWrapper = class ClickedNotificationWrapper extends core.Object {
    get clickedNotification() {
      return this[clickedNotification$];
    }
    set clickedNotification(value) {
      super.clickedNotification = value;
    }
    get handled() {
      return this[handled];
    }
    set handled(value) {
      this[handled] = value;
    }
  };
  (notification.ClickedNotificationWrapper.new = function(clickedNotification) {
    this[handled] = false;
    this[clickedNotification$] = clickedNotification;
    ;
  }).prototype = notification.ClickedNotificationWrapper.prototype;
  dart.addTypeTests(notification.ClickedNotificationWrapper);
  dart.addTypeCaches(notification.ClickedNotificationWrapper);
  dart.setLibraryUri(notification.ClickedNotificationWrapper, I[5]);
  dart.setFieldSignature(notification.ClickedNotificationWrapper, () => ({
    __proto__: dart.getFields(notification.ClickedNotificationWrapper.__proto__),
    clickedNotification: dart.finalFieldType(dart.legacy(notification.ClickedNotification)),
    handled: dart.fieldType(dart.legacy(core.bool))
  }));
  notification.writeNotificationSettingsInto = function writeNotificationSettingsInto(params, notificationSettings) {
    let t22, t22$, t22$0, t22$1, t22$2;
    params[$_set]("notif.settings.nextEnabled", notificationSettings.nextEnabled);
    params[$_set]("notif.settings.stopEnabled", notificationSettings.stopEnabled);
    params[$_set]("notif.settings.playPauseEnabled", notificationSettings.playPauseEnabled);
    params[$_set]("notif.settings.prevEnabled", notificationSettings.prevEnabled);
    params[$_set]("notif.settings.seekBarEnabled", notificationSettings.seekBarEnabled);
    utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "notif.settings.playIcon", (t22 = notificationSettings.customPlayIcon, t22 == null ? null : t22.name));
    utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "notif.settings.pauseIcon", (t22$ = notificationSettings.customPauseIcon, t22$ == null ? null : t22$.name));
    utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "notif.settings.nextIcon", (t22$0 = notificationSettings.customNextIcon, t22$0 == null ? null : t22$0.name));
    utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "notif.settings.previousIcon", (t22$1 = notificationSettings.customPreviousIcon, t22$1 == null ? null : t22$1.name));
    utils['MapUtils|addIfNotNull'](T.StringL(), dart.dynamic, params, "notif.settings.stopIcon", (t22$2 = notificationSettings.customStopIcon, t22$2 == null ? null : t22$2.name));
  };
  var _name$2 = dart.privateName(assets_audio_player, "_name");
  assets_audio_player.PlayerState = class PlayerState extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (assets_audio_player.PlayerState.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = assets_audio_player.PlayerState.prototype;
  dart.addTypeTests(assets_audio_player.PlayerState);
  dart.addTypeCaches(assets_audio_player.PlayerState);
  dart.setMethodSignature(assets_audio_player.PlayerState, () => ({
    __proto__: dart.getMethods(assets_audio_player.PlayerState.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(assets_audio_player.PlayerState, I[6]);
  dart.setFieldSignature(assets_audio_player.PlayerState, () => ({
    __proto__: dart.getFields(assets_audio_player.PlayerState.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(assets_audio_player.PlayerState, ['toString']);
  assets_audio_player.PlayerState.play = C[150] || CT.C150;
  assets_audio_player.PlayerState.pause = C[151] || CT.C151;
  assets_audio_player.PlayerState.stop = C[152] || CT.C152;
  assets_audio_player.PlayerState.values = C[153] || CT.C153;
  var assetsAudioPlayer$ = dart.privateName(assets_audio_player, "PlayerEditor.assetsAudioPlayer");
  var _playlist = dart.privateName(assets_audio_player, "_playlist");
  var _openPlaylistCurrent = dart.privateName(assets_audio_player, "_openPlaylistCurrent");
  var _onAudioUpdated = dart.privateName(assets_audio_player, "_onAudioUpdated");
  assets_audio_player.PlayerEditor = class PlayerEditor extends core.Object {
    get assetsAudioPlayer() {
      return this[assetsAudioPlayer$];
    }
    set assetsAudioPlayer(value) {
      super.assetsAudioPlayer = value;
    }
    onAudioRemovedAt(index) {
      if (this.assetsAudioPlayer[_playlist].playlistIndex == index) {
        this.assetsAudioPlayer[_openPlaylistCurrent]();
      }
    }
    onAudioAddedAt(index) {
      if (this.assetsAudioPlayer[_playlist].playlistIndex == index) {
        this.assetsAudioPlayer[_openPlaylistCurrent]();
      }
    }
    onAudioReplacedAt(index, keepPlayingPositionIfCurrent) {
      if (this.assetsAudioPlayer[_playlist].playlistIndex == index) {
        let currentPosition = this.assetsAudioPlayer.currentPosition.value;
        core.print("onAudioReplacedAt/ currentPosition : " + dart.str(currentPosition));
        if (dart.test(keepPlayingPositionIfCurrent) && currentPosition != null) {
          this.assetsAudioPlayer[_openPlaylistCurrent]({seek: currentPosition});
        } else {
          this.assetsAudioPlayer[_openPlaylistCurrent]();
        }
      }
    }
    onAudioMetasUpdated(audio) {
      this.assetsAudioPlayer[_onAudioUpdated](audio);
    }
  };
  (assets_audio_player.PlayerEditor.__ = function(assetsAudioPlayer) {
    this[assetsAudioPlayer$] = assetsAudioPlayer;
    ;
  }).prototype = assets_audio_player.PlayerEditor.prototype;
  dart.addTypeTests(assets_audio_player.PlayerEditor);
  dart.addTypeCaches(assets_audio_player.PlayerEditor);
  dart.setMethodSignature(assets_audio_player.PlayerEditor, () => ({
    __proto__: dart.getMethods(assets_audio_player.PlayerEditor.__proto__),
    onAudioRemovedAt: dart.fnType(dart.void, [dart.legacy(core.int)]),
    onAudioAddedAt: dart.fnType(dart.void, [dart.legacy(core.int)]),
    onAudioReplacedAt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.bool)]),
    onAudioMetasUpdated: dart.fnType(dart.void, [dart.legacy(playable$.Audio)])
  }));
  dart.setLibraryUri(assets_audio_player.PlayerEditor, I[6]);
  dart.setFieldSignature(assets_audio_player.PlayerEditor, () => ({
    __proto__: dart.getFields(assets_audio_player.PlayerEditor.__proto__),
    assetsAudioPlayer: dart.finalFieldType(dart.legacy(assets_audio_player.AssetsAudioPlayer))
  }));
  var id$0 = dart.privateName(assets_audio_player, "AssetsAudioPlayer.id");
  var _playerEditor = dart.privateName(assets_audio_player, "_playerEditor");
  var _sendChannel$ = dart.privateName(assets_audio_player, "_sendChannel");
  var _recieveChannel = dart.privateName(assets_audio_player, "_recieveChannel");
  var _lastOpenedAssetsAudio = dart.privateName(assets_audio_player, "_lastOpenedAssetsAudio");
  var _isPlaying$ = dart.privateName(assets_audio_player, "_isPlaying");
  var _playerState = dart.privateName(assets_audio_player, "_playerState");
  var _current = dart.privateName(assets_audio_player, "_current");
  var _playlistFinished = dart.privateName(assets_audio_player, "_playlistFinished");
  var _playlistAudioFinished = dart.privateName(assets_audio_player, "_playlistAudioFinished");
  var _currentPosition = dart.privateName(assets_audio_player, "_currentPosition");
  var _volume = dart.privateName(assets_audio_player, "_volume");
  var _isBuffering = dart.privateName(assets_audio_player, "_isBuffering");
  var _loopMode = dart.privateName(assets_audio_player, "_loopMode");
  var _shuffle = dart.privateName(assets_audio_player, "_shuffle");
  var _realtimePlayingInfos = dart.privateName(assets_audio_player, "_realtimePlayingInfos");
  var _playSpeed = dart.privateName(assets_audio_player, "_playSpeed");
  var _forwardRewindSpeed = dart.privateName(assets_audio_player, "_forwardRewindSpeed");
  var _lastSeek = dart.privateName(assets_audio_player, "_lastSeek");
  var _stopped = dart.privateName(assets_audio_player, "_stopped");
  var _respectSilentMode = dart.privateName(assets_audio_player, "_respectSilentMode");
  var _showNotification = dart.privateName(assets_audio_player, "_showNotification");
  var _realTimeSubscription = dart.privateName(assets_audio_player, "_realTimeSubscription");
  var _lifecycleObserver = dart.privateName(assets_audio_player, "_lifecycleObserver");
  var _wasPlayingBeforeEnterBackground = dart.privateName(assets_audio_player, "_wasPlayingBeforeEnterBackground");
  var _wasPlayingBeforeForwardRewind = dart.privateName(assets_audio_player, "_wasPlayingBeforeForwardRewind");
  var _init = dart.privateName(assets_audio_player, "_init");
  var _loopSingleAudio = dart.privateName(assets_audio_player, "_loopSingleAudio");
  var _onFinished = dart.privateName(assets_audio_player, "_onFinished");
  var _notificationNext = dart.privateName(assets_audio_player, "_notificationNext");
  var _notificationPrevious = dart.privateName(assets_audio_player, "_notificationPrevious");
  var _notificationStop = dart.privateName(assets_audio_player, "_notificationStop");
  var _notificationPlayPause = dart.privateName(assets_audio_player, "_notificationPlayPause");
  var _toDuration = dart.privateName(assets_audio_player, "_toDuration");
  var _registerToAppLifecycle = dart.privateName(assets_audio_player, "_registerToAppLifecycle");
  var _replaceRealtimeSubscription = dart.privateName(assets_audio_player, "_replaceRealtimeSubscription");
  var _open$ = dart.privateName(assets_audio_player, "_open");
  var _next = dart.privateName(assets_audio_player, "_next");
  var _handlePlatformAsset = dart.privateName(assets_audio_player, "_handlePlatformAsset");
  var _openPlaylist = dart.privateName(assets_audio_player, "_openPlaylist");
  var _isLiveStream = dart.privateName(assets_audio_player, "_isLiveStream");
  var _play$ = dart.privateName(assets_audio_player, "_play");
  var _stop$ = dart.privateName(assets_audio_player, "_stop");
  var _copyToTmpMemory = dart.privateName(assets_audio_player, "_copyToTmpMemory");
  assets_audio_player.AssetsAudioPlayer = class AssetsAudioPlayer extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    static setupNotificationsOpenAction(action) {
      binding.WidgetsFlutterBinding.ensureInitialized();
      assets_audio_player.AssetsAudioPlayer._notificationOpenChannel = C[154] || CT.C154;
      assets_audio_player.AssetsAudioPlayer._notificationOpenChannel.setMethodCallHandler(dart.fn(call => async.async(core.Null, function*() {
        switch (call.method) {
          case "selectNotification":
          {
            {
              let audioId = T.StringL().as(call.arguments);
              assets_audio_player.AssetsAudioPlayer.__onNotificationClicked.value = new notification.ClickedNotificationWrapper.new(new notification.ClickedNotification.new({audioId: audioId}));
              break;
            }
          }
        }
      }), T.MethodCallLToFutureLOfNull()));
      assets_audio_player.AssetsAudioPlayer.addNotificationOpenAction(action);
    }
    static addNotificationOpenAction(action) {
      return assets_audio_player.AssetsAudioPlayer._onNotificationClicked.listen(dart.fn(clicked => {
        if (action != null && !dart.test(clicked.handled)) {
          let handled = action(clicked.clickedNotification);
          clicked.handled = handled;
        }
      }, T.ClickedNotificationWrapperLToNull()));
    }
    static allPlayers() {
      return T.LinkedHashMapOfStringL$AssetsAudioPlayerL().from(assets_audio_player.AssetsAudioPlayer._players);
    }
    static _getOrCreate(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      if (dart.test(assets_audio_player.AssetsAudioPlayer._players[$containsKey](id))) {
        return assets_audio_player.AssetsAudioPlayer._players[$_get](id);
      } else {
        let player = new assets_audio_player.AssetsAudioPlayer.__({id: id});
        assets_audio_player.AssetsAudioPlayer._players[$_set](id, player);
        return player;
      }
    }
    static newPlayer() {
      return assets_audio_player.AssetsAudioPlayer._getOrCreate({id: assets_audio_player.AssetsAudioPlayer.uuid.v4()});
    }
    static new() {
      return assets_audio_player.AssetsAudioPlayer.newPlayer();
    }
    static withId(id) {
      let t22;
      return assets_audio_player.AssetsAudioPlayer._getOrCreate({id: (t22 = id, t22 == null ? assets_audio_player.AssetsAudioPlayer.uuid.v4() : t22)});
    }
    static playAndForget(audio, opts) {
      let volume = opts && 'volume' in opts ? opts.volume : null;
      let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : false;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
      let player = assets_audio_player.AssetsAudioPlayer.newPlayer();
      let onFinished = null;
      onFinished = player.playlistFinished.listen(dart.fn(finished => {
        let t22;
        if (dart.test(finished)) {
          t22 = onFinished;
          t22 == null ? null : t22.cancel();
          player.dispose();
        }
      }, T.boolLToNull()));
      player.open(audio, {volume: volume, seek: seek, respectSilentMode: respectSilentMode, autoStart: true, playSpeed: playSpeed});
    }
    get readingPlaylist() {
      if (this[_playlist] == null) {
        return null;
      } else {
        return new playing$.ReadingPlaylist.new({audios: this[_playlist].playlist.audios, currentIndex: this[_playlist].playlistIndex});
      }
    }
    get playlist() {
      let t22;
      t22 = this[_playlist];
      return t22 == null ? null : t22.playlist;
    }
    get isPlaying() {
      return this[_isPlaying$].stream;
    }
    get playerState() {
      return this[_playerState].stream;
    }
    get current() {
      return this[_current].stream;
    }
    get onReadyToPlay() {
      return this.current.map(T.PlayingAudioL(), dart.fn(playing => {
        let t22;
        t22 = playing;
        return t22 == null ? null : t22.audio;
      }, T.PlayingLToPlayingAudioL()));
    }
    get playlistFinished() {
      return this[_playlistFinished].stream;
    }
    get playlistAudioFinished() {
      return this[_playlistAudioFinished].stream;
    }
    get currentPosition() {
      return this[_currentPosition].stream;
    }
    get isBuffering() {
      return this[_isBuffering].stream;
    }
    get volume() {
      return this[_volume].stream;
    }
    get loopMode() {
      return this[_loopMode].stream;
    }
    get isShuffling() {
      return this[_shuffle].stream;
    }
    get realtimePlayingInfos() {
      return this[_realtimePlayingInfos].stream;
    }
    get playSpeed() {
      return this[_playSpeed].stream;
    }
    get forwardRewindSpeed() {
      return this[_forwardRewindSpeed].stream;
    }
    get currentLoopMode() {
      return this[_loopMode].value;
    }
    get shuffle() {
      return this[_shuffle].value;
    }
    get respectSilentMode() {
      return this[_respectSilentMode];
    }
    get showNotification() {
      return this[_showNotification];
    }
    set showNotification(newValue) {
      this[_showNotification] = newValue;
      this[_sendChannel$].invokeMethod(dart.dynamic, "showNotification", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "show", this[_showNotification]]));
    }
    setLoopMode(value) {
      return async.async(dart.void, (function* setLoopMode() {
        this[_playlist].loopMode = value;
        this[_loopMode].value = value;
        if (dart.test(this[_playlist].isSingleAudio) || value == loop.LoopMode.single) {
          this[_loopSingleAudio](value != loop.LoopMode.none);
        } else {
          this[_loopSingleAudio](false);
        }
      }).bind(this));
    }
    set shuffle(value) {
      this[_shuffle].value = T.boolL().as(value);
    }
    toggleLoop() {
      return async.async(dart.void, (function* toggleLoop() {
        let currentMode = this.loopMode.value;
        if (dart.test(this[_playlist].isSingleAudio)) {
          if (currentMode == loop.LoopMode.none) {
            yield this.setLoopMode(loop.LoopMode.single);
          } else {
            yield this.setLoopMode(loop.LoopMode.none);
          }
        } else {
          if (currentMode == loop.LoopMode.none) {
            yield this.setLoopMode(loop.LoopMode.playlist);
          } else if (currentMode == loop.LoopMode.playlist) {
            yield this.setLoopMode(loop.LoopMode.single);
          } else {
            yield this.setLoopMode(loop.LoopMode.none);
          }
        }
      }).bind(this));
    }
    toggleShuffle() {
      this.shuffle = !dart.test(this.shuffle);
      this[_playlist].clearPlayerAudio(this.shuffle);
    }
    dispose() {
      let t22, t22$;
      this.stop();
      t22 = this.playlist;
      t22 == null ? null : t22.removeCurrentlyOpenedIn(this[_playerEditor]);
      this[_currentPosition].close();
      this[_isPlaying$].close();
      this[_volume].close();
      this[_playlistFinished].close();
      this[_current].close();
      this[_playlistAudioFinished].close();
      this[_loopMode].close();
      this[_shuffle].close();
      this[_playSpeed].close();
      this[_playerState].close();
      this[_isBuffering].close();
      this[_forwardRewindSpeed].close();
      this[_realtimePlayingInfos].close();
      t22$ = this[_realTimeSubscription];
      t22$ == null ? null : t22$.cancel();
      assets_audio_player.AssetsAudioPlayer._players[$remove](this.id);
      this[_playerEditor] = null;
      binding.WidgetsBinding.instance.removeObserver(this[_lifecycleObserver]);
      this[_lifecycleObserver] = null;
    }
    [_init]() {
      this[_playerEditor] = new assets_audio_player.PlayerEditor.__(this);
      this[_recieveChannel] = new platform_channel.MethodChannel.new("assets_audio_player/" + dart.str(this.id));
      this[_recieveChannel].setMethodCallHandler(dart.fn(call => async.async(core.Null, (function*() {
        switch (call.method) {
          case "log":
          {
            core.print("log: " + dart.notNull(T.StringL().as(call.arguments)));
            break;
          }
          case "player.finished":
          {
            this[_onFinished](T.boolL().as(call.arguments));
            break;
          }
          case "player.next":
          {
            this[_notificationNext]();
            break;
          }
          case "player.prev":
          {
            this[_notificationPrevious]();
            break;
          }
          case "player.stop":
          {
            this[_notificationStop]();
            break;
          }
          case "player.playOrPause":
          {
            this[_notificationPlayPause]();
            break;
          }
          case "player.current":
          {
            if (call.arguments == null) {
              let current = this[_current].value;
              let finishedPlay = new playing$.Playing.new({audio: current.audio, index: current.index, hasNext: false, playlist: current.playlist});
              this[_playlistAudioFinished].add(finishedPlay);
              this[_playlistFinished].value = true;
              this[_current].value = null;
              this[_playerState].value = assets_audio_player.PlayerState.stop;
            } else {
              let totalDurationMs = this[_toDuration](T.numL().as(dart.dsend(call.arguments, '_get', ["totalDurationMs"])));
              let playingAudio = new playing$.PlayingAudio.new({audio: this[_lastOpenedAssetsAudio], duration: totalDurationMs});
              if (this[_playlist] != null) {
                let current = new playing$.Playing.new({audio: playingAudio, index: this[_playlist].playlistIndex, hasNext: this[_playlist].hasNext(), playlist: new playing$.ReadingPlaylist.new({audios: this[_playlist].playlist.audios, currentIndex: this[_playlist].playlistIndex, nextIndex: this[_playlist].nextIndex(), previousIndex: this[_playlist].previousIndex()})});
                this[_current].value = current;
              }
            }
            break;
          }
          case "player.position":
          {
            if (T.intL().is(call.arguments)) {
              this[_currentPosition].value = new core.Duration.new({milliseconds: core.int.as(call.arguments)});
            } else if (T.doubleL().is(call.arguments)) {
              let value = T.doubleL().as(call.arguments);
              this[_currentPosition].value = new core.Duration.new({milliseconds: value[$round]()});
            }
            break;
          }
          case "player.isPlaying":
          {
            let playing = T.boolL().as(call.arguments);
            this[_isPlaying$].value = playing;
            this[_playerState].value = dart.test(playing) ? assets_audio_player.PlayerState.play : assets_audio_player.PlayerState.pause;
            break;
          }
          case "player.volume":
          {
            this[_volume].value = T.doubleL().as(call.arguments);
            break;
          }
          case "player.isBuffering":
          {
            this[_isBuffering].value = T.boolL().as(call.arguments);
            break;
          }
          case "player.playSpeed":
          {
            this[_playSpeed].value = T.doubleL().as(call.arguments);
            break;
          }
          case "player.forwardRewind":
          {
            let newValue = T.doubleL().as(call.arguments);
            if (this[_forwardRewindSpeed].value != newValue) {
              this[_forwardRewindSpeed].value = newValue;
            }
            break;
          }
          default:
          {
            core.print("[ERROR] Channel method " + dart.str(call.method) + " not implemented.");
          }
        }
      }).bind(this)), T.MethodCallLToFutureLOfNull()));
      this[_registerToAppLifecycle]();
    }
    [_registerToAppLifecycle]() {
      this[_lifecycleObserver] = new applifecycle.AppLifecycleObserver.new({onBackground: dart.fn(() => {
          let t22;
          if (this[_playlist] != null) {
            switch (this[_playlist].playInBackground) {
              case C[136] || CT.C136:
              {
                {
                }
                break;
              }
              case C[155] || CT.C155:
              {
                this.pause();
                break;
              }
              case C[156] || CT.C156:
              {
                this[_wasPlayingBeforeEnterBackground] = (t22 = this.isPlaying.value, t22 == null ? false : t22);
                this.pause();
                break;
              }
            }
          }
        }, T.VoidToNull()), onForeground: dart.fn(() => {
          if (this[_playlist] != null) {
            switch (this[_playlist].playInBackground) {
              case C[136] || CT.C136:
              {
                {
                }
                break;
              }
              case C[155] || CT.C155:
              {
                {
                }
                break;
              }
              case C[156] || CT.C156:
              {
                if (this[_wasPlayingBeforeEnterBackground] != null) {
                  if (dart.test(this[_wasPlayingBeforeEnterBackground])) {
                    this.play();
                  } else {
                  }
                }
                break;
              }
            }
          }
        }, T.VoidToNull())});
      binding.WidgetsBinding.instance.addObserver(this[_lifecycleObserver]);
    }
    [_replaceRealtimeSubscription]() {
      let t22;
      t22 = this[_realTimeSubscription];
      t22 == null ? null : t22.cancel();
      this[_realTimeSubscription] = null;
      this[_realTimeSubscription] = combine_latest.CombineLatestStream.list(dart.dynamic, T.JSArrayOfStreamL().of([this.volume, this.isPlaying, this.loopMode, this.isShuffling, this.current, this.currentPosition, this.isBuffering])).map(T.RealtimePlayingInfosL(), dart.fn(values => new playing$.RealtimePlayingInfos.new({volume: T.doubleL().as(values[$_get](0)), isPlaying: T.boolL().as(values[$_get](1)), loopMode: T.LoopModeL().as(values[$_get](2)), isShuffling: T.boolL().as(values[$_get](3)), current: T.PlayingL().as(values[$_get](4)), currentPosition: T.DurationL().as(values[$_get](5)), isBuffering: T.boolL().as(values[$_get](6)), playerId: this.id}), T.ListLToRealtimePlayingInfosL())).listen(dart.fn(readingInfos => {
        this[_realtimePlayingInfos].value = readingInfos;
      }, T.RealtimePlayingInfosLToNull()));
    }
    playlistPlayAtIndex(index) {
      return async.async(dart.void, (function* playlistPlayAtIndex() {
        this[_playlist].moveTo(index);
        yield this[_openPlaylistCurrent]();
      }).bind(this));
    }
    previous(opts) {
      let keepLoopMode = opts && 'keepLoopMode' in opts ? opts.keepLoopMode : true;
      return async.async(T.boolL(), (function* previous() {
        if (this[_playlist] != null) {
          if (this[_currentPosition].value != null && dart.notNull(this[_currentPosition].value.inSeconds) >= 5) {
            yield this.seek(core.Duration.zero, {force: true});
          } else if (dart.test(this[_playlist].hasPrev())) {
            if (!dart.test(keepLoopMode)) {
              if (this.loopMode.value == loop.LoopMode.single) {
                yield this.setLoopMode(loop.LoopMode.playlist);
              }
            }
            this[_playlist].selectPrev();
            yield this[_openPlaylistCurrent]();
            return true;
          } else if (this[_playlist].playlistIndex === 0) {
            this.seek(core.Duration.zero);
            return true;
          }
        }
        return false;
      }).bind(this));
    }
    [_openPlaylistCurrent](opts) {
      let autoStart = opts && 'autoStart' in opts ? opts.autoStart : true;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      return async.async(dart.void, (function* _openPlaylistCurrent() {
        if (this[_playlist] != null) {
          return this[_open$](this[_playlist].currentAudio(), {forcedVolume: this[_playlist].volume, respectSilentMode: this[_playlist].respectSilentMode, showNotification: this[_playlist].showNotification, playSpeed: this[_playlist].playSpeed, notificationSettings: this[_playlist].notificationSettings, autoStart: autoStart, loopMode: this[_playlist].loopMode, seek: seek});
        }
      }).bind(this));
    }
    next(opts) {
      let stopIfLast = opts && 'stopIfLast' in opts ? opts.stopIfLast : false;
      let keepLoopMode = opts && 'keepLoopMode' in opts ? opts.keepLoopMode : true;
      return this[_next]({stopIfLast: stopIfLast, requestByUser: true, keepLoopMode: keepLoopMode});
    }
    [_next](opts) {
      let stopIfLast = opts && 'stopIfLast' in opts ? opts.stopIfLast : false;
      let requestByUser = opts && 'requestByUser' in opts ? opts.requestByUser : false;
      let keepLoopMode = opts && 'keepLoopMode' in opts ? opts.keepLoopMode : true;
      return async.async(T.boolL(), (function* _next() {
        if (this[_playlist] != null) {
          if (this.loopMode.value == loop.LoopMode.single) {
            if (!dart.test(requestByUser)) {
              yield this.seek(core.Duration.zero);
              return true;
            } else {
              if (!dart.test(keepLoopMode)) {
                yield this.setLoopMode(loop.LoopMode.playlist);
              }
            }
          }
          if (dart.test(this[_playlist].hasNext())) {
            if (this[_current].value != null) {
              this[_playlistAudioFinished].add(new playing$.Playing.new({audio: this[_current].value.audio, index: this[_current].value.index, hasNext: true, playlist: this[_current].value.playlist}));
            }
            this[_playlist].selectNext();
            yield this[_openPlaylistCurrent]();
            return true;
          } else if (this.loopMode.value == loop.LoopMode.playlist) {
            if (this[_current].value != null) {
              this[_playlistAudioFinished].add(new playing$.Playing.new({audio: this[_current].value.audio, index: this[_current].value.index, hasNext: false, playlist: this[_current].value.playlist}));
            }
            this[_playlist].returnToFirst();
            yield this[_openPlaylistCurrent]();
            return true;
          } else if (dart.test(stopIfLast)) {
            this.stop();
            return true;
          } else if (dart.test(requestByUser)) {
            if (this[_current].value != null) {
              this[_playlistAudioFinished].add(new playing$.Playing.new({audio: this[_current].value.audio, index: this[_current].value.index, hasNext: false, playlist: this[_current].value.playlist}));
            }
            this[_playlist].returnToFirst();
            yield this[_openPlaylistCurrent]();
            return true;
          }
        }
        return false;
      }).bind(this));
    }
    [_onFinished](isFinished) {
      return async.async(dart.void, (function* _onFinished() {
        let nextDone = (yield this[_next]({stopIfLast: false, requestByUser: false}));
        if (dart.test(nextDone)) {
          this[_playlistFinished].value = false;
        } else {
          this[_playlistFinished].value = true;
          this.stop();
        }
      }).bind(this));
    }
    [_toDuration](value) {
      if (value[$isNaN]) {
        return new core.Duration.new({milliseconds: 0});
      } else if (T.intL().is(value)) {
        return new core.Duration.new({milliseconds: value});
      } else if (T.doubleL().is(value)) {
        return new core.Duration.new({milliseconds: value[$round]()});
      } else {
        return new core.Duration.new();
      }
    }
    [_notificationPrevious]() {
      let t22, t22$, t22$0, t23, t22$1;
      if ((t22$ = (t22 = this[_playlist], t22 == null ? null : t22.notificationSettings), t22$ == null ? null : t22$.customPrevAction) != null) {
        t22$1 = (t22$0 = this[_playlist], t22$0 == null ? null : t22$0.notificationSettings);
        t22$1 == null ? null : (t23 = t22$1, t23.customPrevAction(this));
      } else {
        this.previous();
      }
    }
    [_notificationStop]() {
      let t22, t22$, t22$0, t23, t22$1;
      if ((t22$ = (t22 = this[_playlist], t22 == null ? null : t22.notificationSettings), t22$ == null ? null : t22$.customStopAction) != null) {
        t22$1 = (t22$0 = this[_playlist], t22$0 == null ? null : t22$0.notificationSettings);
        t22$1 == null ? null : (t23 = t22$1, t23.customStopAction(this));
      } else {
        this.stop();
      }
    }
    [_notificationPlayPause]() {
      let t22, t22$, t22$0, t23, t22$1;
      if ((t22$ = (t22 = this[_playlist], t22 == null ? null : t22.notificationSettings), t22$ == null ? null : t22$.customPlayPauseAction) != null) {
        t22$1 = (t22$0 = this[_playlist], t22$0 == null ? null : t22$0.notificationSettings);
        t22$1 == null ? null : (t23 = t22$1, t23.customPlayPauseAction(this));
      } else {
        this.playOrPause();
      }
    }
    [_notificationNext]() {
      let t22, t22$, t22$0, t23, t22$1;
      if ((t22$ = (t22 = this[_playlist], t22 == null ? null : t22.notificationSettings), t22$ == null ? null : t22$.customNextAction) != null) {
        t22$1 = (t22$0 = this[_playlist], t22$0 == null ? null : t22$0.notificationSettings);
        t22$1 == null ? null : (t23 = t22$1, t23.customNextAction(this));
      } else {
        this.next();
      }
    }
    [_open$](audioInput, opts) {
      let autoStart = opts && 'autoStart' in opts ? opts.autoStart : true;
      let forcedVolume = opts && 'forcedVolume' in opts ? opts.forcedVolume : null;
      let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : false;
      let showNotification = opts && 'showNotification' in opts ? opts.showNotification : false;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
      let loopMode = opts && 'loopMode' in opts ? opts.loopMode : null;
      let notificationSettings = opts && 'notificationSettings' in opts ? opts.notificationSettings : null;
      return async.async(dart.void, (function* _open() {
        let t22, t22$, t22$0, t22$1, t22$2;
        let currentAudio = this[_lastOpenedAssetsAudio];
        if (audioInput != null) {
          this[_respectSilentMode] = respectSilentMode;
          this[_showNotification] = showNotification;
          let audio = (yield this[_handlePlatformAsset](audioInput));
          audio.setCurrentlyOpenedIn(this[_playerEditor]);
          try {
            let params = new (T.IdentityMapOfStringL$dynamic()).from(["id", this.id, "audioType", playable$.audioTypeDescription(audio.audioType), "path", audio.path, "autoStart", autoStart, "respectSilentMode", respectSilentMode, "displayNotification", showNotification, "volume", (t22$ = (t22 = forcedVolume, t22 == null ? this.volume.value : t22), t22$ == null ? assets_audio_player.AssetsAudioPlayer.defaultVolume : t22$), "playSpeed", (t22$1 = (t22$0 = playSpeed, t22$0 == null ? this.playSpeed.value : t22$0), t22$1 == null ? assets_audio_player.AssetsAudioPlayer.defaultPlaySpeed : t22$1)]);
            if (seek != null) {
              params[$_set]("seek", seek.inMilliseconds[$round]());
            }
            if (audio.package != null) {
              params[$_set]("package", audio.package);
            }
            if (audio.networkHeaders != null) {
              params[$_set]("networkHeaders", audio.networkHeaders);
            }
            let notifSettings = (t22$2 = notificationSettings, t22$2 == null ? new notification.NotificationSettings.new() : t22$2);
            notification.writeNotificationSettingsInto(params, notifSettings);
            playable$.writeAudioMetasInto(params, audio.metas);
            this[_lastOpenedAssetsAudio] = audioInput;
            yield this[_sendChannel$].invokeMethod(dart.dynamic, "open", params);
            yield this.setLoopMode(loopMode);
            this[_playlistFinished].value = false;
          } catch (e$) {
            let e = dart.getThrown(e$);
            this[_lastOpenedAssetsAudio] = currentAudio;
            try {
              yield this.stop();
            } catch (e$0) {
              let t = dart.getThrown(e$0);
              core.print(t);
            }
            core.print(e);
            return T.FutureOfvoid().error(e);
          }
        }
      }).bind(this));
    }
    [_onAudioUpdated](audio) {
      return async.async(dart.void, (function* _onAudioUpdated() {
        if (this[_lastOpenedAssetsAudio] != null) {
          if (this[_lastOpenedAssetsAudio].path == audio.path) {
            let params = new (T.IdentityMapOfStringL$dynamic()).from(["id", this.id, "path", audio.path]);
            playable$.writeAudioMetasInto(params, audio.metas);
            yield this[_sendChannel$].invokeMethod(dart.dynamic, "onAudioUpdated", params);
          }
        }
      }).bind(this));
    }
    updateCurrentAudioNotification(opts) {
      let metas = opts && 'metas' in opts ? opts.metas : null;
      let showNotifications = opts && 'showNotifications' in opts ? opts.showNotifications : true;
      return async.async(dart.void, (function* updateCurrentAudioNotification() {
        if (this[_lastOpenedAssetsAudio] != null) {
          let params = new (T.IdentityMapOfStringL$dynamic()).from(["id", this.id, "path", this[_lastOpenedAssetsAudio], "showNotification", showNotifications]);
          playable$.writeAudioMetasInto(params, metas);
          yield this[_sendChannel$].invokeMethod(dart.dynamic, "onAudioUpdated", params);
        }
      }).bind(this));
    }
    [_openPlaylist](playlist, opts) {
      let autoStart = opts && 'autoStart' in opts ? opts.autoStart : true;
      let volume = opts && 'volume' in opts ? opts.volume : null;
      let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : false;
      let showNotification = opts && 'showNotification' in opts ? opts.showNotification : false;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
      let loopMode = opts && 'loopMode' in opts ? opts.loopMode : null;
      let notificationSettings = opts && 'notificationSettings' in opts ? opts.notificationSettings : null;
      let playInBackground = opts && 'playInBackground' in opts ? opts.playInBackground : C[136] || CT.C136;
      return async.async(dart.void, (function* _openPlaylist() {
        this[_lastSeek] = null;
        this[_replaceRealtimeSubscription]();
        this[_playlist] = new assets_audio_player._CurrentPlaylist.new({playlist: playlist, volume: volume, respectSilentMode: respectSilentMode, showNotification: showNotification, playSpeed: playSpeed, loopMode: loopMode, notificationSettings: notificationSettings, playInBackground: playInBackground});
        this[_playlist].clearPlayerAudio(this.shuffle);
        this[_playlist].moveTo(playlist.startIndex);
        playlist.setCurrentlyOpenedIn(this[_playerEditor]);
        return this[_openPlaylistCurrent]({autoStart: autoStart, seek: seek});
      }).bind(this));
    }
    get [_isLiveStream]() {
      let t24;
      return (t24 = this[_lastOpenedAssetsAudio], t24 == null ? null : t24.audioType) == playable$.AudioType.liveStream;
    }
    open(playable, opts) {
      let autoStart = opts && 'autoStart' in opts ? opts.autoStart : true;
      let volume = opts && 'volume' in opts ? opts.volume : null;
      let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : false;
      let showNotification = opts && 'showNotification' in opts ? opts.showNotification : false;
      let seek = opts && 'seek' in opts ? opts.seek : null;
      let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
      let notificationSettings = opts && 'notificationSettings' in opts ? opts.notificationSettings : null;
      let loopMode = opts && 'loopMode' in opts ? opts.loopMode : C[0] || CT.C0;
      let playInBackground = opts && 'playInBackground' in opts ? opts.playInBackground : C[136] || CT.C136;
      return async.async(dart.void, (function* open() {
        let t24;
        let playlist = null;
        if (T.PlaylistL().is(playable) && playable.audios != null && dart.notNull(playable.audios[$length]) > 0) {
          playlist = playable;
        } else if (T.AudioL().is(playable)) {
          playlist = new playable$.Playlist.new({audios: T.JSArrayOfAudioL().of([playable])});
        }
        if (playlist != null) {
          yield this[_openPlaylist](playlist, {autoStart: autoStart, volume: volume, respectSilentMode: respectSilentMode, showNotification: showNotification, seek: seek, loopMode: loopMode, playSpeed: playSpeed, notificationSettings: (t24 = notificationSettings, t24 == null ? assets_audio_player.AssetsAudioPlayer.defaultNotificationSettings : t24), playInBackground: playInBackground});
        }
      }).bind(this));
    }
    playOrPause() {
      return async.async(dart.void, (function* playOrPause() {
        let playing = this[_isPlaying$].value;
        if (dart.test(playing)) {
          yield this.pause();
        } else {
          yield this.play();
        }
      }).bind(this));
    }
    play() {
      return async.async(dart.void, (function* play() {
        let t24;
        if (dart.test(this[_isLiveStream])) {
          yield this[_openPlaylistCurrent]();
        } else {
          if (dart.test(this[_stopped])) {
            this[_stopped] = false;
            this[_lastOpenedAssetsAudio] = null;
            t24 = this[_playlist];
            t24 == null ? null : t24.returnToFirst();
            yield this[_openPlaylistCurrent]();
          } else {
            yield this[_play$]();
          }
        }
      }).bind(this));
    }
    [_play$]() {
      return async.async(dart.void, (function* _play() {
        yield this[_sendChannel$].invokeMethod(dart.dynamic, "play", new (T.IdentityMapOfStringL$StringL()).from(["id", this.id]));
      }).bind(this));
    }
    [_loopSingleAudio](loop) {
      return async.async(dart.void, (function* _loopSingleAudio() {
        yield this[_sendChannel$].invokeMethod(dart.dynamic, "loopSingleAudio", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "loop", loop]));
      }).bind(this));
    }
    pause() {
      return async.async(dart.void, (function* pause() {
        if (dart.test(this[_isLiveStream])) {
          yield this[_stop$]({removeNotification: false});
        } else {
          if (!dart.test(this[_stopped])) {
            yield this[_sendChannel$].invokeMethod(dart.dynamic, "pause", new (T.IdentityMapOfStringL$StringL()).from(["id", this.id]));
            this[_lastSeek] = this[_currentPosition].value;
          }
        }
      }).bind(this));
    }
    seek(to, opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      return async.async(dart.void, (function* seek() {
        if (!dart.equals(to, this[_lastSeek]) || dart.test(force)) {
          this[_lastSeek] = to;
          yield this[_sendChannel$].invokeMethod(dart.dynamic, "seek", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "to", to.inMilliseconds[$round]()]));
        }
      }).bind(this));
    }
    forwardOrRewind(speed) {
      return async.async(dart.void, (function* forwardOrRewind() {
        if (speed === 0 || speed == null) {
          if (dart.test(this[_wasPlayingBeforeForwardRewind])) {
            yield this.play();
          } else {
            yield this.pause();
          }
          this[_wasPlayingBeforeForwardRewind] = null;
        } else {
          if (this[_wasPlayingBeforeForwardRewind] == null) {
            this[_wasPlayingBeforeForwardRewind] = this.isPlaying.value;
          }
          yield this[_sendChannel$].invokeMethod(dart.dynamic, "forwardRewind", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "speed", speed]));
        }
      }).bind(this));
    }
    seekBy(by) {
      return async.async(dart.void, (function* seekBy() {
        let t24, t24$;
        let playing = this.current.value;
        if (playing != null) {
          let totalDuration = playing.audio.duration;
          let currentPosition = (t24 = this.currentPosition.value, t24 == null ? new core.Duration.new() : t24);
          if (dart.notNull(by.inMilliseconds) >= 0) {
            let nextPosition = currentPosition['+'](by);
            let currentPositionCapped = new core.Duration.new({milliseconds: math.min(T.intL(), totalDuration.inMilliseconds, nextPosition.inMilliseconds)});
            yield this.seek(currentPositionCapped);
          } else {
            let currentPosition = (t24$ = this.currentPosition.value, t24$ == null ? new core.Duration.new() : t24$);
            let nextPosition = currentPosition['+'](by);
            let currentPositionCapped = new core.Duration.new({milliseconds: math.max(T.intL(), 0, nextPosition.inMilliseconds)});
            yield this.seek(currentPositionCapped);
          }
        }
      }).bind(this));
    }
    setVolume(volume) {
      return async.async(dart.void, (function* setVolume() {
        yield this[_sendChannel$].invokeMethod(dart.dynamic, "volume", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "volume", volume[$clamp](assets_audio_player.AssetsAudioPlayer.minVolume, assets_audio_player.AssetsAudioPlayer.maxVolume)]));
      }).bind(this));
    }
    stop() {
      return async.async(dart.void, (function* stop() {
        return this[_stop$]({removeNotification: true});
      }).bind(this));
    }
    [_stop$](opts) {
      let removeNotification = opts && 'removeNotification' in opts ? opts.removeNotification : true;
      return async.async(dart.void, (function* _stop() {
        this[_stopped] = true;
        yield this[_sendChannel$].invokeMethod(dart.dynamic, "stop", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "removeNotification", removeNotification]));
      }).bind(this));
    }
    setPlaySpeed(playSpeed) {
      return async.async(dart.void, (function* setPlaySpeed() {
        let t24;
        yield this[_sendChannel$].invokeMethod(dart.dynamic, "playSpeed", new (T.IdentityMapOfStringL$ObjectL()).from(["id", this.id, "playSpeed", (t24 = playSpeed, t24 == null ? assets_audio_player.AssetsAudioPlayer.defaultPlaySpeed : t24)[$clamp](assets_audio_player.AssetsAudioPlayer.minPlaySpeed, assets_audio_player.AssetsAudioPlayer.maxPlaySpeed)]));
      }).bind(this));
    }
    [_handlePlatformAsset](input) {
      return async.async(T.AudioL(), (function* _handlePlatformAsset() {
        if (platform.defaultTargetPlatform == platform.TargetPlatform.macOS && input.audioType == playable$.AudioType.asset) {
          let path = (yield this[_copyToTmpMemory]({package: input.package, assetSource: input.path}));
          return input.copyWith({audioType: playable$.AudioType.file, path: path});
        }
        return input;
      }).bind(this));
    }
    [_copyToTmpMemory](opts) {
      let $package = opts && 'package' in opts ? opts.package : null;
      let assetSource = opts && 'assetSource' in opts ? opts.assetSource : null;
      return async.async(T.StringL(), function* _copyToTmpMemory() {
        let t24;
        let fileName = dart.str((t24 = $package, t24 == null ? "" : t24)) + dart.str(assetSource);
        let completePath = dart.str((yield path_provider.getTemporaryDirectory()).path) + "/" + fileName;
        let file = io.File.new(completePath);
        if (dart.test(yield file.exists())) {
          return file.path;
        } else {
          yield file.create({recursive: true});
          let assetContent = null;
          if ($package == null) {
            assetContent = (yield asset_bundle.rootBundle.load(dart.str(assetSource)));
          } else {
            assetContent = (yield asset_bundle.rootBundle.load(dart.str($package) + "/" + dart.str(assetSource)));
          }
          yield file.writeAsBytes(assetContent[$buffer][$asUint8List]());
          return file.path;
        }
      });
    }
  };
  (assets_audio_player.AssetsAudioPlayer.__ = function(opts) {
    let id = opts && 'id' in opts ? opts.id : "DEFAULT_PLAYER";
    this[_playerEditor] = null;
    this[_sendChannel$] = C[137] || CT.C137;
    this[_recieveChannel] = null;
    this[_lastOpenedAssetsAudio] = null;
    this[_playlist] = null;
    this[_isPlaying$] = T.BehaviorSubjectOfboolL().seeded(false);
    this[_playerState] = T.BehaviorSubjectOfPlayerStateL().seeded(assets_audio_player.PlayerState.stop);
    this[_current] = T.BehaviorSubjectOfPlayingL().new();
    this[_playlistFinished] = T.BehaviorSubjectOfboolL().seeded(false);
    this[_playlistAudioFinished] = T.PublishSubjectOfPlayingL().new();
    this[_currentPosition] = T.BehaviorSubjectOfDurationL().seeded(C[140] || CT.C140);
    this[_volume] = T.BehaviorSubjectOfdoubleL().seeded(assets_audio_player.AssetsAudioPlayer.defaultVolume);
    this[_isBuffering] = T.BehaviorSubjectOfboolL().seeded(false);
    this[_loopMode] = T.BehaviorSubjectOfLoopModeL().seeded(loop.LoopMode.none);
    this[_shuffle] = T.BehaviorSubjectOfboolL().seeded(false);
    this[_realtimePlayingInfos] = T.BehaviorSubjectOfRealtimePlayingInfosL().new();
    this[_playSpeed] = T.BehaviorSubjectOfdoubleL().seeded(1.0);
    this[_forwardRewindSpeed] = T.BehaviorSubjectOfdoubleL().seeded(0.0);
    this[_lastSeek] = null;
    this[_stopped] = false;
    this[_respectSilentMode] = false;
    this[_showNotification] = false;
    this[_realTimeSubscription] = null;
    this[_lifecycleObserver] = null;
    this[_wasPlayingBeforeEnterBackground] = null;
    this[_wasPlayingBeforeForwardRewind] = null;
    this[id$0] = id;
    this[_init]();
  }).prototype = assets_audio_player.AssetsAudioPlayer.prototype;
  dart.addTypeTests(assets_audio_player.AssetsAudioPlayer);
  dart.addTypeCaches(assets_audio_player.AssetsAudioPlayer);
  dart.setMethodSignature(assets_audio_player.AssetsAudioPlayer, () => ({
    __proto__: dart.getMethods(assets_audio_player.AssetsAudioPlayer.__proto__),
    setLoopMode: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(loop.LoopMode)]),
    toggleLoop: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    toggleShuffle: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    [_init]: dart.fnType(dart.dynamic, []),
    [_registerToAppLifecycle]: dart.fnType(dart.void, []),
    [_replaceRealtimeSubscription]: dart.fnType(dart.void, []),
    playlistPlayAtIndex: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    previous: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {keepLoopMode: dart.legacy(core.bool)}, {}),
    [_openPlaylistCurrent]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {autoStart: dart.legacy(core.bool), seek: dart.legacy(core.Duration)}, {}),
    next: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {keepLoopMode: dart.legacy(core.bool), stopIfLast: dart.legacy(core.bool)}, {}),
    [_next]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {keepLoopMode: dart.legacy(core.bool), requestByUser: dart.legacy(core.bool), stopIfLast: dart.legacy(core.bool)}, {}),
    [_onFinished]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.bool)]),
    [_toDuration]: dart.fnType(dart.legacy(core.Duration), [dart.legacy(core.num)]),
    [_notificationPrevious]: dart.fnType(dart.void, []),
    [_notificationStop]: dart.fnType(dart.void, []),
    [_notificationPlayPause]: dart.fnType(dart.void, []),
    [_notificationNext]: dart.fnType(dart.void, []),
    [_open$]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Audio)], {autoStart: dart.legacy(core.bool), forcedVolume: dart.legacy(core.double), loopMode: dart.legacy(loop.LoopMode), notificationSettings: dart.legacy(notification.NotificationSettings), playSpeed: dart.legacy(core.double), respectSilentMode: dart.legacy(core.bool), seek: dart.legacy(core.Duration), showNotification: dart.legacy(core.bool)}, {}),
    [_onAudioUpdated]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Audio)]),
    updateCurrentAudioNotification: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {metas: dart.legacy(playable$.Metas), showNotifications: dart.legacy(core.bool)}, {}),
    [_openPlaylist]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Playlist)], {autoStart: dart.legacy(core.bool), loopMode: dart.legacy(loop.LoopMode), notificationSettings: dart.legacy(notification.NotificationSettings), playInBackground: dart.legacy(applifecycle.PlayInBackground), playSpeed: dart.legacy(core.double), respectSilentMode: dart.legacy(core.bool), seek: dart.legacy(core.Duration), showNotification: dart.legacy(core.bool), volume: dart.legacy(core.double)}, {}),
    open: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(playable$.Playable)], {autoStart: dart.legacy(core.bool), loopMode: dart.legacy(loop.LoopMode), notificationSettings: dart.legacy(notification.NotificationSettings), playInBackground: dart.legacy(applifecycle.PlayInBackground), playSpeed: dart.legacy(core.double), respectSilentMode: dart.legacy(core.bool), seek: dart.legacy(core.Duration), showNotification: dart.legacy(core.bool), volume: dart.legacy(core.double)}, {}),
    playOrPause: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    play: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_play$]: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_loopSingleAudio]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.bool)]),
    pause: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    seek: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Duration)], {force: dart.legacy(core.bool)}, {}),
    forwardOrRewind: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.double)]),
    seekBy: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.Duration)]),
    setVolume: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.double)]),
    stop: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_stop$]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {removeNotification: dart.legacy(core.bool)}, {}),
    setPlaySpeed: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.double)]),
    [_handlePlatformAsset]: dart.fnType(dart.legacy(async.Future$(dart.legacy(playable$.Audio))), [dart.legacy(playable$.Audio)]),
    [_copyToTmpMemory]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {assetSource: dart.legacy(core.String), package: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(assets_audio_player.AssetsAudioPlayer, () => ({
    __proto__: dart.getGetters(assets_audio_player.AssetsAudioPlayer.__proto__),
    readingPlaylist: dart.legacy(playing$.ReadingPlaylist),
    playlist: dart.legacy(playable$.Playlist),
    isPlaying: dart.legacy(value_stream.ValueStream$(dart.legacy(core.bool))),
    playerState: dart.legacy(value_stream.ValueStream$(dart.legacy(assets_audio_player.PlayerState))),
    current: dart.legacy(value_stream.ValueStream$(dart.legacy(playing$.Playing))),
    onReadyToPlay: dart.legacy(async.Stream$(dart.legacy(playing$.PlayingAudio))),
    playlistFinished: dart.legacy(value_stream.ValueStream$(dart.legacy(core.bool))),
    playlistAudioFinished: dart.legacy(async.Stream$(dart.legacy(playing$.Playing))),
    currentPosition: dart.legacy(value_stream.ValueStream$(dart.legacy(core.Duration))),
    isBuffering: dart.legacy(value_stream.ValueStream$(dart.legacy(core.bool))),
    volume: dart.legacy(value_stream.ValueStream$(dart.legacy(core.double))),
    loopMode: dart.legacy(value_stream.ValueStream$(dart.legacy(loop.LoopMode))),
    isShuffling: dart.legacy(value_stream.ValueStream$(dart.legacy(core.bool))),
    realtimePlayingInfos: dart.legacy(value_stream.ValueStream$(dart.legacy(playing$.RealtimePlayingInfos))),
    playSpeed: dart.legacy(value_stream.ValueStream$(dart.legacy(core.double))),
    forwardRewindSpeed: dart.legacy(value_stream.ValueStream$(dart.legacy(core.double))),
    currentLoopMode: dart.legacy(loop.LoopMode),
    shuffle: dart.legacy(core.bool),
    respectSilentMode: dart.legacy(core.bool),
    showNotification: dart.legacy(core.bool),
    [_isLiveStream]: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(assets_audio_player.AssetsAudioPlayer, () => ({
    __proto__: dart.getSetters(assets_audio_player.AssetsAudioPlayer.__proto__),
    showNotification: dart.legacy(core.bool),
    shuffle: dart.dynamic
  }));
  dart.setLibraryUri(assets_audio_player.AssetsAudioPlayer, I[6]);
  dart.setFieldSignature(assets_audio_player.AssetsAudioPlayer, () => ({
    __proto__: dart.getFields(assets_audio_player.AssetsAudioPlayer.__proto__),
    [_playerEditor]: dart.fieldType(dart.legacy(assets_audio_player.PlayerEditor)),
    [_sendChannel$]: dart.finalFieldType(dart.legacy(platform_channel.MethodChannel)),
    [_recieveChannel]: dart.fieldType(dart.legacy(platform_channel.MethodChannel)),
    [_lastOpenedAssetsAudio]: dart.fieldType(dart.legacy(playable$.Audio)),
    [_playlist]: dart.fieldType(dart.legacy(assets_audio_player._CurrentPlaylist)),
    id: dart.finalFieldType(dart.legacy(core.String)),
    [_isPlaying$]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.bool)))),
    [_playerState]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(assets_audio_player.PlayerState)))),
    [_current]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(playing$.Playing)))),
    [_playlistFinished]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.bool)))),
    [_playlistAudioFinished]: dart.finalFieldType(dart.legacy(publish_subject.PublishSubject$(dart.legacy(playing$.Playing)))),
    [_currentPosition]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.Duration)))),
    [_volume]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.double)))),
    [_isBuffering]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.bool)))),
    [_loopMode]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(loop.LoopMode)))),
    [_shuffle]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.bool)))),
    [_realtimePlayingInfos]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(playing$.RealtimePlayingInfos)))),
    [_playSpeed]: dart.fieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.double)))),
    [_forwardRewindSpeed]: dart.fieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(core.double)))),
    [_lastSeek]: dart.fieldType(dart.legacy(core.Duration)),
    [_stopped]: dart.fieldType(dart.legacy(core.bool)),
    [_respectSilentMode]: dart.fieldType(dart.legacy(core.bool)),
    [_showNotification]: dart.fieldType(dart.legacy(core.bool)),
    [_realTimeSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_lifecycleObserver]: dart.fieldType(dart.legacy(applifecycle.AppLifecycleObserver)),
    [_wasPlayingBeforeEnterBackground]: dart.fieldType(dart.legacy(core.bool)),
    [_wasPlayingBeforeForwardRewind]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(assets_audio_player.AssetsAudioPlayer, {
    /*assets_audio_player.AssetsAudioPlayer.minVolume*/get minVolume() {
      return 0.0;
    },
    /*assets_audio_player.AssetsAudioPlayer.maxVolume*/get maxVolume() {
      return 1.0;
    },
    /*assets_audio_player.AssetsAudioPlayer.minPlaySpeed*/get minPlaySpeed() {
      return 0.0;
    },
    /*assets_audio_player.AssetsAudioPlayer.maxPlaySpeed*/get maxPlaySpeed() {
      return 16.0;
    },
    /*assets_audio_player.AssetsAudioPlayer.defaultVolume*/get defaultVolume() {
      return assets_audio_player.AssetsAudioPlayer.maxVolume;
    },
    /*assets_audio_player.AssetsAudioPlayer.defaultPlaySpeed*/get defaultPlaySpeed() {
      return 1.0;
    },
    /*assets_audio_player.AssetsAudioPlayer.defaultNotificationSettings*/get defaultNotificationSettings() {
      return C[157] || CT.C157;
    },
    /*assets_audio_player.AssetsAudioPlayer._notificationOpenChannel*/get _notificationOpenChannel() {
      return C[154] || CT.C154;
    },
    set _notificationOpenChannel(_) {},
    /*assets_audio_player.AssetsAudioPlayer.__onNotificationClicked*/get __onNotificationClicked() {
      return T.BehaviorSubjectOfClickedNotificationWrapperL().new();
    },
    /*assets_audio_player.AssetsAudioPlayer._onNotificationClicked*/get _onNotificationClicked() {
      return assets_audio_player.AssetsAudioPlayer.__onNotificationClicked.stream;
    },
    /*assets_audio_player.AssetsAudioPlayer.uuid*/get uuid() {
      return new uuid.Uuid.new();
    },
    /*assets_audio_player.AssetsAudioPlayer._players*/get _players() {
      return new (T.LinkedMapOfStringL$AssetsAudioPlayerL()).new();
    }
  }, true);
  var _shuffleNumbers = dart.privateName(assets_audio_player, "_shuffleNumbers");
  assets_audio_player._CurrentPlaylist = class _CurrentPlaylist extends core.Object {
    nextIndex() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      if (dart.notNull(index) + 1 === this.indexList[$length]) {
        return this.indexList[$first];
      } else {
        return this.indexList[$_get](dart.notNull(index) + 1);
      }
    }
    previousIndex() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      if (index === 0) {
        return this.indexList[$last];
      } else {
        return this.indexList[$_get](dart.notNull(index) - 1);
      }
    }
    selectNext() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      if (dart.test(this.hasNext())) {
        index = dart.notNull(index) + 1;
      }
      this.playlistIndex = index;
    }
    sortAudios() {
      for (let i = 0; i < dart.notNull(this.playlist.audios[$length]); i = i + 1) {
        this.indexList[$add](i);
      }
    }
    clearPlayerAudio(shuffle) {
      this.indexList[$clear]();
      if (dart.test(shuffle)) {
        this.shuffleAudios();
      } else {
        this.sortAudios();
      }
    }
    shuffleAudios() {
      for (let i = 0; i < dart.notNull(this.playlist.audios[$length]); i = i + 1) {
        let index = this[_shuffleNumbers]();
        this.indexList[$add](index);
      }
    }
    [_shuffleNumbers]() {
      let random = math.Random.new();
      let index = random.nextInt(this.playlist.audios[$length]);
      if (dart.test(this.indexList[$contains](index))) {
        index = this[_shuffleNumbers]();
      }
      return index;
    }
    moveTo(index) {
      if (dart.notNull(index) < 0) {
        this.playlistIndex = this.indexList[$indexWhere](dart.fn(element => element === 0, T.intLToboolL()));
      } else {
        this.playlistIndex = this.indexList[$indexWhere](dart.fn(element => element == index, T.intLToboolL()));
      }
      return this.playlistIndex;
    }
    audioAt(opts) {
      let at = opts && 'at' in opts ? opts.at : null;
      if (dart.notNull(at) < dart.notNull(this.playlist.audios[$length])) {
        return this.playlist.audios[$_get](at);
      } else {
        return null;
      }
    }
    currentAudio() {
      return this.audioAt({at: this.indexList[$_get](this.playlistIndex)});
    }
    hasNext() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      return dart.notNull(index) + 1 < dart.notNull(this.indexList[$length]);
    }
    get isSingleAudio() {
      return this.playlist.audios[$length] === 1;
    }
    returnToFirst() {
      this.playlistIndex = this.playlist.startIndex;
    }
    hasPrev() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      return dart.notNull(index) > 0;
    }
    selectPrev() {
      let index = this.indexList[$indexWhere](dart.fn(element => this.playlistIndex == element, T.intLToboolL()));
      index = dart.notNull(index) - 1;
      this.playlistIndex = index;
      if (dart.notNull(this.playlistIndex) < 0) {
        this.playlistIndex = 0;
      }
    }
  };
  (assets_audio_player._CurrentPlaylist.new = function(opts) {
    let playlist = opts && 'playlist' in opts ? opts.playlist : null;
    let volume = opts && 'volume' in opts ? opts.volume : null;
    let respectSilentMode = opts && 'respectSilentMode' in opts ? opts.respectSilentMode : null;
    let showNotification = opts && 'showNotification' in opts ? opts.showNotification : null;
    let playSpeed = opts && 'playSpeed' in opts ? opts.playSpeed : null;
    let notificationSettings = opts && 'notificationSettings' in opts ? opts.notificationSettings : null;
    let playInBackground = opts && 'playInBackground' in opts ? opts.playInBackground : null;
    let loopMode = opts && 'loopMode' in opts ? opts.loopMode : null;
    this.playlistIndex = 0;
    this.indexList = T.JSArrayOfintL().of([]);
    this.playlist = playlist;
    this.volume = volume;
    this.respectSilentMode = respectSilentMode;
    this.showNotification = showNotification;
    this.playSpeed = playSpeed;
    this.notificationSettings = notificationSettings;
    this.playInBackground = playInBackground;
    this.loopMode = loopMode;
    ;
  }).prototype = assets_audio_player._CurrentPlaylist.prototype;
  dart.addTypeTests(assets_audio_player._CurrentPlaylist);
  dart.addTypeCaches(assets_audio_player._CurrentPlaylist);
  dart.setMethodSignature(assets_audio_player._CurrentPlaylist, () => ({
    __proto__: dart.getMethods(assets_audio_player._CurrentPlaylist.__proto__),
    nextIndex: dart.fnType(dart.legacy(core.int), []),
    previousIndex: dart.fnType(dart.legacy(core.int), []),
    selectNext: dart.fnType(dart.dynamic, []),
    sortAudios: dart.fnType(dart.dynamic, []),
    clearPlayerAudio: dart.fnType(dart.dynamic, [dart.legacy(core.bool)]),
    shuffleAudios: dart.fnType(dart.dynamic, []),
    [_shuffleNumbers]: dart.fnType(dart.legacy(core.int), []),
    moveTo: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    audioAt: dart.fnType(dart.legacy(playable$.Audio), [], {at: dart.legacy(core.int)}, {}),
    currentAudio: dart.fnType(dart.legacy(playable$.Audio), []),
    hasNext: dart.fnType(dart.legacy(core.bool), []),
    returnToFirst: dart.fnType(dart.void, []),
    hasPrev: dart.fnType(dart.legacy(core.bool), []),
    selectPrev: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(assets_audio_player._CurrentPlaylist, () => ({
    __proto__: dart.getGetters(assets_audio_player._CurrentPlaylist.__proto__),
    isSingleAudio: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(assets_audio_player._CurrentPlaylist, I[6]);
  dart.setFieldSignature(assets_audio_player._CurrentPlaylist, () => ({
    __proto__: dart.getFields(assets_audio_player._CurrentPlaylist.__proto__),
    playlist: dart.finalFieldType(dart.legacy(playable$.Playlist)),
    volume: dart.finalFieldType(dart.legacy(core.double)),
    respectSilentMode: dart.finalFieldType(dart.legacy(core.bool)),
    showNotification: dart.finalFieldType(dart.legacy(core.bool)),
    loopMode: dart.fieldType(dart.legacy(loop.LoopMode)),
    playSpeed: dart.finalFieldType(dart.legacy(core.double)),
    notificationSettings: dart.finalFieldType(dart.legacy(notification.NotificationSettings)),
    playInBackground: dart.finalFieldType(dart.legacy(applifecycle.PlayInBackground)),
    playlistIndex: dart.fieldType(dart.legacy(core.int)),
    indexList: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  dart.defineLazy(assets_audio_player, {
    /*assets_audio_player._DEFAULT_AUTO_START*/get _DEFAULT_AUTO_START() {
      return true;
    },
    /*assets_audio_player._DEFAULT_RESPECT_SILENT_MODE*/get _DEFAULT_RESPECT_SILENT_MODE() {
      return false;
    },
    /*assets_audio_player._DEFAULT_SHOW_NOTIFICATION*/get _DEFAULT_SHOW_NOTIFICATION() {
      return false;
    },
    /*assets_audio_player._DEFAULT_PLAY_IN_BACKGROUND*/get _DEFAULT_PLAY_IN_BACKGROUND() {
      return C[136] || CT.C136;
    },
    /*assets_audio_player._DEFAULT_PLAYER*/get _DEFAULT_PLAYER() {
      return "DEFAULT_PLAYER";
    },
    /*assets_audio_player.METHOD_POSITION*/get METHOD_POSITION() {
      return "player.position";
    },
    /*assets_audio_player.METHOD_VOLUME*/get METHOD_VOLUME() {
      return "player.volume";
    },
    /*assets_audio_player.METHOD_FINISHED*/get METHOD_FINISHED() {
      return "player.finished";
    },
    /*assets_audio_player.METHOD_IS_PLAYING*/get METHOD_IS_PLAYING() {
      return "player.isPlaying";
    },
    /*assets_audio_player.METHOD_IS_BUFFERING*/get METHOD_IS_BUFFERING() {
      return "player.isBuffering";
    },
    /*assets_audio_player.METHOD_CURRENT*/get METHOD_CURRENT() {
      return "player.current";
    },
    /*assets_audio_player.METHOD_FORWARD_REWIND_SPEED*/get METHOD_FORWARD_REWIND_SPEED() {
      return "player.forwardRewind";
    },
    /*assets_audio_player.METHOD_NOTIFICATION_NEXT*/get METHOD_NOTIFICATION_NEXT() {
      return "player.next";
    },
    /*assets_audio_player.METHOD_NOTIFICATION_PREV*/get METHOD_NOTIFICATION_PREV() {
      return "player.prev";
    },
    /*assets_audio_player.METHOD_NOTIFICATION_STOP*/get METHOD_NOTIFICATION_STOP() {
      return "player.stop";
    },
    /*assets_audio_player.METHOD_NOTIFICATION_PLAY_OR_PAUSE*/get METHOD_NOTIFICATION_PLAY_OR_PAUSE() {
      return "player.playOrPause";
    },
    /*assets_audio_player.METHOD_PLAY_SPEED*/get METHOD_PLAY_SPEED() {
      return "player.playSpeed";
    }
  }, true);
  dart.trackLibraries("packages/assets_audio_player/src/widget/audio_widget.dart", {
    "package:assets_audio_player/src/widget/audio_widget.dart": audio_widget,
    "package:assets_audio_player/src/builders/player_builders_ext.dart": player_builders_ext,
    "package:assets_audio_player/src/builders/player_builders.dart": player_builders,
    "package:assets_audio_player/src/player_group.dart": player_group,
    "package:assets_audio_player/src/playing.dart": playing$,
    "package:assets_audio_player/src/playable.dart": playable$,
    "package:assets_audio_player/src/notification.dart": notification,
    "package:assets_audio_player/src/assets_audio_player.dart": assets_audio_player,
    "package:assets_audio_player/assets_audio_player.dart": assets_audio_player$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["audio_widget.dart","../builders/player_builders_ext.dart","../builders/player_builders.dart","../player_group.dart","../playing.dart","../playable.dart","../notification.dart","../assets_audio_player.dart"],"names":[],"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","file":"../../../../../../../../../../../../../packages/assets_audio_player/src/widget/audio_widget.dart.lib.js"}');
  // Exports:
  return {
    src__widget__audio_widget: audio_widget,
    src__builders__player_builders_ext: player_builders_ext,
    src__builders__player_builders: player_builders,
    src__player_group: player_group,
    src__playing: playing$,
    src__playable: playable$,
    src__notification: notification,
    src__assets_audio_player: assets_audio_player,
    assets_audio_player: assets_audio_player$
  };
}));

//# sourceMappingURL=audio_widget.dart.lib.js.map
