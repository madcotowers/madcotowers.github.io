define(['dart_sdk'], (function load__packages__rxdart__src__streams__zip_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var zip = Object.create(dart.library);
  var $every = dartx.every;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $toList = dartx.toList;
  var $remove = dartx.remove;
  var $map = dartx.map;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    StreamL: () => (T$.StreamL = dart.constFn(dart.legacy(async.Stream)))(),
    JSArrayOfStreamL: () => (T$.JSArrayOfStreamL = dart.constFn(_interceptors.JSArray$(T$.StreamL())))(),
    ListL: () => (T$.ListL = dart.constFn(dart.legacy(core.List)))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    FutureL: () => (T$.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    FutureLTovoid: () => (T$.FutureLTovoid = dart.constFn(dart.fnType(dart.void, [], [T$.FutureL()])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureLOfvoid: () => (T$.FutureLOfvoid = dart.constFn(dart.legacy(T$.FutureOfvoid())))(),
    FutureLOfvoidToboolL: () => (T$.FutureLOfvoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.FutureLOfvoid()])))(),
    FutureOfListL: () => (T$.FutureOfListL = dart.constFn(async.Future$(T$.ListL())))(),
    FutureLOfListL: () => (T$.FutureLOfListL = dart.constFn(dart.legacy(T$.FutureOfListL())))(),
    VoidToFutureLOfListL: () => (T$.VoidToFutureLOfListL = dart.constFn(dart.fnType(T$.FutureLOfListL(), [])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/Users/Sean/Documents/SIUE/CS499/flutter/.pub-cache/hosted/pub.dartlang.org/rxdart-0.24.1/lib/src/streams/zip.dart",
    "package:rxdart/src/streams/zip.dart"
  ];
  const _is_ZipStream_default = Symbol('_is_ZipStream_default');
  zip.ZipStream$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var StreamLOfTLToboolL = () => (StreamLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [StreamLOfTL()])))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class ZipStream extends async.StreamView$(dart.legacy(R)) {
      static list(T, streams) {
        return new (zip.ZipStream$(dart.legacy(T), dart.legacy(core.List$(dart.legacy(T))))).new(streams, dart.fn(values => values, dart.fnType(dart.legacy(core.List$(dart.legacy(T))), [dart.legacy(core.List$(dart.legacy(T)))])));
      }
      static zip2(A, B, R, streamOne, streamTwo, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamOne, streamTwo]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip3(A, B, C, R, streamA, streamB, streamC, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip4(A, B, C, D, R, streamA, streamB, streamC, streamD, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip5(A, B, C, D, E, R, streamA, streamB, streamC, streamD, streamE, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD, streamE]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip6(A, B, C, D, E, F, R, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD, streamE, streamF]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip7(A, B, C, D, E, F, G, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip8(A, B, C, D, E, F, G, H, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6)), dart.legacy(H).as(values[$_get](7))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static zip9(A, B, C, D, E, F, G, H, I, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
        return new (zip.ZipStream$(dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI]), dart.fn(values => zipper(dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6)), dart.legacy(H).as(values[$_get](7)), dart.legacy(I).as(values[$_get](8))), dart.fnType(dart.legacy(R), [T$.ListL()])));
      }
      static _buildController(T, R, streams, zipper) {
        {
          let controller = null;
          let len = streams[$length];
          let subscriptions = null;
          let pendingSubscriptions = null;
          controller = async.StreamController$(dart.legacy(R)).new({sync: true, onListen: dart.fn(() => {
              try {
                let completeCurrent = null;
                let window = new (zip._Window$(dart.legacy(T))).new(len);
                let index = 0;
                let next = dart.fn(() => {
                  let t0;
                  t0 = completeCurrent;
                  t0 == null ? null : t0.complete();
                  completeCurrent = async.Completer$(dart.legacy(core.List$(dart.legacy(T)))).new();
                  pendingSubscriptions = subscriptions[$toList]();
                }, T$.VoidToNull());
                let doUpdate = dart.fn(index => dart.fn(value => {
                  let t1;
                  window.onValue(index, value);
                  if (dart.test(window.isComplete)) {
                    try {
                      controller.add(zipper(window.flush()));
                      next();
                    } catch (e$) {
                      let e = dart.getThrown(e$);
                      let s = dart.stackTrace(e$);
                      controller.addError(e, s);
                    }
                  } else {
                    let subscription = (t1 = subscriptions[$_get](index), (() => {
                      t1.pause(completeCurrent.future);
                      return t1;
                    })());
                    pendingSubscriptions[$remove](subscription);
                  }
                }, dart.fnType(core.Null, [dart.legacy(T)])), dart.fnType(dart.legacy(dart.fnType(core.Null, [dart.legacy(T)])), [T$.intL()]));
                subscriptions = streams[$map](dart.legacy(async.StreamSubscription$(dart.legacy(T))), dart.fn(stream => {
                  let t1;
                  return stream.listen(doUpdate((t1 = index, index = t1 + 1, t1)), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')});
                }, dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), [dart.legacy(async.Stream$(dart.legacy(T)))])))[$toList]({growable: false});
                next();
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                controller.addError(e, s);
              }
            }, T$.VoidToNull()), onPause: dart.fn((resumeSignal = null) => pendingSubscriptions[$forEach](dart.fn(subscription => subscription.pause(resumeSignal), dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))), T$.FutureLTovoid()), onResume: dart.fn(() => pendingSubscriptions[$forEach](dart.fn(subscription => subscription.resume(), dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))), T$.VoidTovoid()), onCancel: dart.fn(() => async.Future.wait(dart.dynamic, subscriptions[$map](T$.FutureLOfvoid(), dart.fn(subscription => subscription.cancel(), dart.fnType(T$.FutureLOfvoid(), [dart.legacy(async.StreamSubscription$(dart.legacy(T)))])))[$where](dart.fn(cancelFuture => cancelFuture != null, T$.FutureLOfvoidToboolL()))), T$.VoidToFutureLOfListL())});
          return controller;
        }
      }
    }
    (ZipStream.new = function(streams, zipper) {
      if (!(streams != null && dart.test(streams[$every](dart.fn(s => s != null, StreamLOfTLToboolL()))))) dart.assertFailed("streams cannot be null", I[0], 47, 16, "streams != null && streams.every((s) => s != null)");
      if (!(zipper != null)) dart.assertFailed("must provide a zipper function", I[0], 49, 16, "zipper != null");
      ZipStream.__proto__.new.call(this, zip.ZipStream._buildController(TL(), RL(), streams, zipper).stream);
      ;
    }).prototype = ZipStream.prototype;
    dart.addTypeTests(ZipStream);
    ZipStream.prototype[_is_ZipStream_default] = true;
    dart.addTypeCaches(ZipStream);
    dart.setLibraryUri(ZipStream, I[1]);
    return ZipStream;
  });
  zip.ZipStream = zip.ZipStream$();
  dart.addTypeTests(zip.ZipStream, _is_ZipStream_default);
  var _valuesReceived = dart.privateName(zip, "_valuesReceived");
  var _values = dart.privateName(zip, "_values");
  const _is__Window_default = Symbol('_is__Window_default');
  zip._Window$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    class _Window extends core.Object {
      get isComplete() {
        return this[_valuesReceived] == this.size;
      }
      onValue(index, value) {
        TL().as(value);
        this[_values][$_set](index, value);
        this[_valuesReceived] = dart.notNull(this[_valuesReceived]) + 1;
      }
      flush() {
        this[_valuesReceived] = 0;
        return ListOfTL().unmodifiable(this[_values]);
      }
    }
    (_Window.new = function(size) {
      this[_valuesReceived] = 0;
      this.size = size;
      this[_values] = ListOfTL().new(size);
      ;
    }).prototype = _Window.prototype;
    dart.addTypeTests(_Window);
    _Window.prototype[_is__Window_default] = true;
    dart.addTypeCaches(_Window);
    dart.setMethodSignature(_Window, () => ({
      __proto__: dart.getMethods(_Window.__proto__),
      onValue: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      flush: dart.fnType(dart.legacy(core.List$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(_Window, () => ({
      __proto__: dart.getGetters(_Window.__proto__),
      isComplete: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(_Window, I[1]);
    dart.setFieldSignature(_Window, () => ({
      __proto__: dart.getFields(_Window.__proto__),
      size: dart.finalFieldType(dart.legacy(core.int)),
      [_values]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      [_valuesReceived]: dart.fieldType(dart.legacy(core.int))
    }));
    return _Window;
  });
  zip._Window = zip._Window$();
  dart.addTypeTests(zip._Window, _is__Window_default);
  zip['ZipWithExtension|zipWith'] = function ZipWithExtension$124zipWith(T, S, R, $this, other, zipper) {
    let stream = zip.ZipStream.zip2(dart.legacy(T), dart.legacy(S), dart.legacy(R), $this, other, zipper);
    return dart.test($this.isBroadcast) ? stream.asBroadcastStream() : stream;
  };
  zip['ZipWithExtension|get#zipWith'] = function ZipWithExtension$124get$35zipWith(T, $this) {
    return dart.fn((S, R, other, zipper) => zip['ZipWithExtension|zipWith'](dart.legacy(T), dart.legacy(S), dart.legacy(R), $this, other, zipper), dart.gFnType((S, R) => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfSL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), SL()]))]];
    }));
  };
  dart.trackLibraries("packages/rxdart/src/streams/zip.dart", {
    "package:rxdart/src/streams/zip.dart": zip
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["zip.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/rxdart/src/streams/zip.dart.lib.js"}');
  // Exports:
  return {
    src__streams__zip: zip
  };
}));

//# sourceMappingURL=zip.dart.lib.js.map
